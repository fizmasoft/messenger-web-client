import { __awaiter } from "tslib";
import axios from 'axios';
import { v1 as uuidV1 } from 'uuid';
// import { ENV } from '../common/config';
import { ENV, getMessenger } from '../index';
import { DeviceTypesEnum } from '../types/types';
import { localStg } from '../utils';
const baseURL = 'http://localhost:7000';
const localUid = localStg.get('messengerDeviceUid');
const uid = localUid ? localUid : uuidV1();
localStg.set('messengerDeviceUid', uid);
const chatId = '66cc25d3c1875cfa0dddfa20'; // ! rm
let appVersion = '1.0.0';
const apiKey = 'qalqon';
const apiHash = '66b3576d917425b29a3e3644';
const messenger = getMessenger({
    baseURL,
    apiKey,
    apiHash,
    languageGetter() {
        return 'Uz-Latin';
    },
    token: () => __awaiter(void 0, void 0, void 0, function* () {
        const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyMDA5LCJ1c2VybmFtZSI6IlVtYXJiZWsiLCJmdWxsX25hbWUiOiJBS0JBUk9WIFVNQVIiLCJwaG9uZV9udW1iZXIiOiIrOTk4OTQ1NDM0NTY3IiwiZ3JvdXAiOnsiaWQiOjIsIm5hbWUiOiJBZG1pbiIsImFjY2Vzc2VzIjpbM119LCJvcmdhbml6YXRpb25faWQiOm51bGwsInNlcnZpY2VzIjpbeyJpZCI6MiwibmFtZSI6Im50ZmFjZSIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6NiwibmFtZSI6InhhdGxvdiIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6MTQsIm5hbWUiOiJlbWVobW9uIiwic3RhdHVzIjp0cnVlfSx7ImlkIjoxNiwibmFtZSI6ImF1dG8tdHJhbnNwb3J0Iiwic3RhdHVzIjp0cnVlfSx7ImlkIjoxOCwibmFtZSI6ImFjY2lkZW50cyIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6MjAsIm5hbWUiOiJkaGEiLCJzdGF0dXMiOnRydWV9LHsiaWQiOjIxLCJuYW1lIjoiZm9ybWExIiwic3RhdHVzIjp0cnVlfSx7ImlkIjoyMiwibmFtZSI6Iml2c3MtbWFuYWdlciIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6MjcsIm5hbWUiOiJxdWljay1zZWFyY2giLCJzdGF0dXMiOnRydWV9LHsiaWQiOjI5LCJuYW1lIjoiY2FtZXJhIiwic3RhdHVzIjp0cnVlfSx7ImlkIjozMCwibmFtZSI6ImZ2diIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6MzEsIm5hbWUiOiJncHMiLCJzdGF0dXMiOnRydWV9LHsiaWQiOjMyLCJuYW1lIjoic2F5bG92Iiwic3RhdHVzIjp0cnVlfSx7ImlkIjozNCwibmFtZSI6Imxpc3RlZC1wZW9wbGUiLCJzdGF0dXMiOnRydWV9LHsiaWQiOjM2LCJuYW1lIjoidGFkYmlyIiwic3RhdHVzIjp0cnVlfSx7ImlkIjozOCwibmFtZSI6Im10cCIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6NDAsIm5hbWUiOiJjcmltZSIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6NDEsIm5hbWUiOiJjYXIiLCJzdGF0dXMiOnRydWV9LHsiaWQiOjQyLCJuYW1lIjoib3BnIiwic3RhdHVzIjp0cnVlfSx7ImlkIjo0MywibmFtZSI6Im1pYiIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6NDQsIm5hbWUiOiJzZXJ2aWNlIiwic3RhdHVzIjp0cnVlfSx7ImlkIjo0NSwibmFtZSI6Im5vdGlmaWNhdGlvbnMiLCJzdGF0dXMiOnRydWV9LHsiaWQiOjQ2LCJuYW1lIjoidGVlbmFnZXJzIiwic3RhdHVzIjp0cnVlfSx7ImlkIjo0NywibmFtZSI6ImJ1cy1wYXJraW5nIiwic3RhdHVzIjp0cnVlfSx7ImlkIjo0OCwibmFtZSI6ImRldGVjdG9yIiwic3RhdHVzIjp0cnVlfSx7ImlkIjo0OSwibmFtZSI6ImFkZC1jYW1lcmEiLCJzdGF0dXMiOnRydWV9LHsiaWQiOjUwLCJuYW1lIjoiaXZzcy1jb250cm9sIiwic3RhdHVzIjp0cnVlfSx7ImlkIjo1MSwibmFtZSI6IjV0YXNoYWJidXMiLCJzdGF0dXMiOnRydWV9LHsiaWQiOjUyLCJuYW1lIjoibG9nZ2VyIiwic3RhdHVzIjp0cnVlfSx7ImlkIjo1MywibmFtZSI6InNjbyIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6NTQsIm5hbWUiOiJsYW5ndWFnZSIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6NTUsIm5hbWUiOiJzdXBlcnZpc29yIiwic3RhdHVzIjp0cnVlfSx7ImlkIjo1NywibmFtZSI6Im15LWluc3BlY3RvciIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6NTksIm5hbWUiOiJib2R5LWNhbWVyYSIsInN0YXR1cyI6dHJ1ZX0seyJpZCI6NjAsIm5hbWUiOiJlbWlncmFudCIsInN0YXR1cyI6dHJ1ZX1dLCJkaXN0cmljdElkIjpudWxsLCJoYXNoIjoiYTNjZDk0MDQ1N2EwZjA0ZGE5ZDQ1ZDY4MDRjMDM3Y2UifSwiaWF0IjoxNzI1OTcxNzQxLCJleHAiOjE3MjYwNTgxNDF9.vDkyGh1OJeiOHFWE-PNoYUrJoi5DAZgKdSIxkeapuso';
        const { data } = yield axios.create({ baseURL }).get(`/v1/auth/me-from?token=${token}`, {
            headers: {
                Authorization: `Basic ${btoa(`${apiKey}:${apiHash}`)}`,
                'x-device-type': DeviceTypesEnum.WEB,
                'x-app-lang': 'Uz-Latin',
                'x-device-model': ENV.isBrowser
                    ? `${navigator.userAgent} | ${navigator.platform}`
                    : ENV.isNode
                        ? `${process.platform} | ${process.arch} | Nodejs: ${process.version}`
                        : 'Unknown', // dynamically fetching device model info
                // 'x-app-lang': (languageGetter() || 'Uz-Latin') as I18nType.LangType, // dynamically fetching language info
                'x-app-version': appVersion,
                'x-app-uid': uid,
            },
        });
        return {
            access: data.data.token.accessToken,
            refresh: data.data.token.refreshToken,
        };
        // const res = await axios.post(
        //   `${baseURL}/v1/auth/login`,
        //   {
        //     username: 'Umarkhan', // Adhamjon, Umarkhan
        //     password: '123',
        //   },
        //   {
        //     headers: requiredHeaders,
        //   },
        // );
        // return {
        //   access: res.data.data.token.accessToken,
        //   refresh: res.data.data.token.refreshToken,
        // };
    }),
    // polling: { interval: 5_000, limit: 100 },
});
console.log('Success started');
messenger
    .on('connect', ({ message, socket }) => {
    console.log('connected', message, socket.id);
})
    .on('reconnect_attempt', (...args) => {
    console.log('reconnect_attempt', args);
})
    .on('reconnect', (...args) => {
    console.log('reconnect', args);
})
    .on('disconnect', ({ reason, details }) => {
    console.log('disconnect', reason);
})
    .on('pong', () => {
    console.log('pong');
})
    .on('update', (data) => {
    console.log(data._id, 'update');
})
    .on('chatAction', (action) => {
    console.log(action, 'chatAction');
})
    .on('socketConnectionError', (err) => {
    console.log(err);
});
const getRadomNumber = (from, to) => from + Math.round(Math.random() * (to - from));
(() => __awaiter(void 0, void 0, void 0, function* () {
    let message;
    const random = getRadomNumber(0, 100);
    // const random = 3;
    if (random % 2 === 0) {
        message = {
            messageType: 'text',
            to: { chatType: 'private', chatId: chatId },
            text: `Test xabar ${Math.random() * 100}. Time: ${new Date().toISOString()}`,
        };
    }
    else {
        const wanted = {
            type: 'user',
            title: 'MVD-Qidiruv',
            databaseName: 'MVD-Qidiruv',
            pUser: {
                image: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
                // fullImage: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
                fullName: 'Qambarov Qumriniso Qulmiddin qizi',
                address: 'Qashqadaryo Viloyat, Kitob Tuman, Qashqir qishloq',
                passport: 'AA8432720',
                birthDate: '19.05.1981',
            },
            wantedUser: {
                image: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
                // fullImage: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
                fullName: 'Qambarov Qumriniso Qulmiddin qizi',
                address: 'Qashqadaryo Viloyat, Kitob Tuman, Qashqir qishloq',
                passport: 'AA8432720',
                birthDate: '19.05.1981',
            },
            car: {
                carImage: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
                carNumber: '01O010OO',
            },
            takenImage: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
            fullImage: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
            initiator: 'ЖАЛАКУДУКСКИЙ РОВД',
            address: 'Туркистон кўчаси, Dehqon bozori',
            text: `Test xabar ${Math.random() * 100}. Time: ${new Date().toISOString()}`,
            mera: 'АРЕСТ',
            region: 'ОЛМАЛИК ШАҲРИ',
            statya: '139 ч.3 п.А;140 ч.1',
            rozType: 'МЕЖГОСУДАРСТВЕННЫЙ Р',
            location: [40.84764631407434, 69.61757628864146],
            // fullImage: 'ivss_images/full_image_0ab1cece-d8bc-42ea-af6a-067206810dbd.jpg',
            // takenImage: 'ivss_images/taken_image_47fbc602-65ea-460a-bbd8-051c9df946f0.jpg',
            objectName: 'Дехқон бозори',
            wantedDate: new Date('07.31.2019').toISOString(),
        };
        if (random % 3 === 0) {
            wanted.pUser = null;
            wanted.wantedUser = null;
            wanted.type = 'car';
        }
        else {
            wanted.car = null;
        }
        message = {
            messageType: 'wanted',
            to: { chatType: 'private', chatId: chatId },
            wanted: wanted,
            text: null,
        };
    }
    yield new Promise((res) => messenger.on('connect', res));
    // await messenger
    //   .sendMessage(message)
    //   .then((res) => {
    //     console.log(res, 'Success sended');
    //     return res.data;
    //   })
    //   .catch((err) => {
    //     console.log(err.response?.data, 'err');
    //   });
}))();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXhhbXBsZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsRUFBRSxJQUFJLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwQywwQ0FBMEM7QUFDMUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHN0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFcEMsTUFBTSxPQUFPLEdBQUcsdUJBQXVCLENBQUM7QUFDeEMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3BELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUMzQyxRQUFRLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBRXhDLE1BQU0sTUFBTSxHQUFHLDBCQUEwQixDQUFDLENBQUMsT0FBTztBQUNsRCxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUM7QUFFekIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBQ3hCLE1BQU0sT0FBTyxHQUFHLDBCQUEwQixDQUFDO0FBRTNDLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQztJQUM3QixPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxjQUFjO1FBQ1osT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUNELEtBQUssRUFBRSxHQUdKLEVBQUU7UUFDSCxNQUFNLEtBQUssR0FDVCx1MUVBQXUxRSxDQUFDO1FBQzExRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxL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TUFBTTtZQUNkLElBQUksRUFBRSxJQUFJO1NBQ1gsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXpELGtCQUFrQjtJQUNsQiwwQkFBMEI7SUFDMUIscUJBQXFCO0lBQ3JCLDBDQUEwQztJQUMxQyx1QkFBdUI7SUFDdkIsT0FBTztJQUNQLHNCQUFzQjtJQUN0Qiw4Q0FBOEM7SUFDOUMsUUFBUTtBQUNWLENBQUMsQ0FBQSxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IHYxIGFzIHV1aWRWMSB9IGZyb20gJ3V1aWQnO1xyXG4vLyBpbXBvcnQgeyBFTlYgfSBmcm9tICcuLi9jb21tb24vY29uZmlnJztcclxuaW1wb3J0IHsgRU5WLCBnZXRNZXNzZW5nZXIgfSBmcm9tICcuLi9pbmRleCc7XHJcbmltcG9ydCB7IElTZW5kQ2hhdE1lc3NhZ2VXYW50ZWQsIElTZW5kTWVzc2FnZSB9IGZyb20gJy4uL3R5cGVzL2FwaS9tZXNzYWdlJztcclxuaW1wb3J0IHsgSU9uVXBkYXRlIH0gZnJvbSAnLi4vdHlwZXMvYXBpL21lc3NhZ2UudHlwZXMnO1xyXG5pbXBvcnQgeyBEZXZpY2VUeXBlc0VudW0gfSBmcm9tICcuLi90eXBlcy90eXBlcyc7XHJcbmltcG9ydCB7IGxvY2FsU3RnIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuY29uc3QgYmFzZVVSTCA9ICdodHRwOi8vbG9jYWxob3N0OjcwMDAnO1xyXG5jb25zdCBsb2NhbFVpZCA9IGxvY2FsU3RnLmdldCgnbWVzc2VuZ2VyRGV2aWNlVWlkJyk7XHJcbmNvbnN0IHVpZCA9IGxvY2FsVWlkID8gbG9jYWxVaWQgOiB1dWlkVjEoKTtcclxubG9jYWxTdGcuc2V0KCdtZXNzZW5nZXJEZXZpY2VVaWQnLCB1aWQpO1xyXG5cclxuY29uc3QgY2hhdElkID0gJzY2Y2MyNWQzYzE4NzVjZmEwZGRkZmEyMCc7IC8vICEgcm1cclxubGV0IGFwcFZlcnNpb24gPSAnMS4wLjAnO1xyXG5cclxuY29uc3QgYXBpS2V5ID0gJ3FhbHFvbic7XHJcbmNvbnN0IGFwaUhhc2ggPSAnNjZiMzU3NmQ5MTc0MjViMjlhM2UzNjQ0JztcclxuXHJcbmNvbnN0IG1lc3NlbmdlciA9IGdldE1lc3Nlbmdlcih7XHJcbiAgYmFzZVVSTCxcclxuICBhcGlLZXksXHJcbiAgYXBpSGFzaCxcclxuICBsYW5ndWFnZUdldHRlcigpIHtcclxuICAgIHJldHVybiAnVXotTGF0aW4nO1xyXG4gIH0sXHJcbiAgdG9rZW46IGFzeW5jICgpOiBQcm9taXNlPHtcclxuICAgIGFjY2Vzczogc3RyaW5nO1xyXG4gICAgcmVmcmVzaDogc3RyaW5nO1xyXG4gIH0+ID0+IHtcclxuICAgIGNvbnN0IHRva2VuID1cclxuICAgICAgJ2V5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUoxYzJWeUlqcDdJbWxrSWpveU1EQTVMQ0oxYzJWeWJtRnRaU0k2SWxWdFlYSmlaV3NpTENKbWRXeHNYMjVoYldVaU9pSkJTMEpCVWs5V0lGVk5RVklpTENKd2FHOXVaVjl1ZFcxaVpYSWlPaUlyT1RrNE9UUTFORE0wTlRZM0lpd2laM0p2ZFhBaU9uc2lhV1FpT2pJc0ltNWhiV1VpT2lKQlpHMXBiaUlzSW1GalkyVnpjMlZ6SWpwYk0xMTlMQ0p2Y21kaGJtbDZZWFJwYjI1ZmFXUWlPbTUxYkd3c0luTmxjblpwWTJWeklqcGJleUpwWkNJNk1pd2libUZ0WlNJNkltNTBabUZqWlNJc0luTjBZWFIxY3lJNmRISjFaWDBzZXlKcFpDSTZOaXdpYm1GdFpTSTZJbmhoZEd4dmRpSXNJbk4wWVhSMWN5STZkSEoxWlgwc2V5SnBaQ0k2TVRRc0ltNWhiV1VpT2lKbGJXVm9iVzl1SWl3aWMzUmhkSFZ6SWpwMGNuVmxmU3g3SW1sa0lqb3hOaXdpYm1GdFpTSTZJbUYxZEc4dGRISmhibk53YjNKMElpd2ljM1JoZEhWeklqcDBjblZsZlN4N0ltbGtJam94T0N3aWJtRnRaU0k2SW1GalkybGtaVzUwY3lJc0luTjBZWFIxY3lJNmRISjFaWDBzZXlKcFpDSTZNakFzSW01aGJXVWlPaUprYUdFaUxDSnpkR0YwZFhNaU9uUnlkV1Y5TEhzaWFXUWlPakl4TENKdVlXMWxJam9pWm05eWJXRXhJaXdpYzNSaGRIVnpJanAwY25WbGZTeDdJbWxrSWpveU1pd2libUZ0WlNJNkltbDJjM010YldGdVlXZGxjaUlzSW5OMFlYUjFjeUk2ZEhKMVpYMHNleUpwWkNJNk1qY3NJbTVoYldVaU9pSnhkV2xqYXkxelpXRnlZMmdpTENKemRHRjBkWE1pT25SeWRXVjlMSHNpYVdRaU9qSTVMQ0p1WVcxbElqb2lZMkZ0WlhKaElpd2ljM1JoZEhWeklqcDBjblZsZlN4N0ltbGtJam96TUN3aWJtRnRaU0k2SW1aMmRpSXNJbk4wWVhSMWN5STZkSEoxWlgwc2V5SnBaQ0k2TXpFc0ltNWhiV1VpT2lKbmNITWlMQ0p6ZEdGMGRYTWlPblJ5ZFdWOUxIc2lhV1FpT2pNeUxDSnVZVzFsSWpvaWMyRjViRzkySWl3aWMzUmhkSFZ6SWpwMGNuVmxmU3g3SW1sa0lqb3pOQ3dpYm1GdFpTSTZJbXhwYzNSbFpDMXdaVzl3YkdVaUxDSnpkR0YwZFhNaU9uUnlkV1Y5TEhzaWFXUWlPak0yTENKdVlXMWxJam9pZEdGa1ltbHlJaXdpYzNSaGRIVnpJanAwY25WbGZTeDdJbWxrSWpvek9Dd2libUZ0WlNJNkltMTBjQ0lzSW5OMFlYUjFjeUk2ZEhKMVpYMHNleUpwWkNJNk5EQXNJbTVoYldVaU9pSmpjbWx0WlNJc0luTjBZWFIxY3lJNmRISjFaWDBzZXlKcFpDSTZOREVzSW01aGJXVWlPaUpqWVhJaUxDSnpkR0YwZFhNaU9uUnlkV1Y5TEhzaWFXUWlPalF5TENKdVlXMWxJam9pYjNCbklpd2ljM1JoZEhWeklqcDBjblZsZlN4N0ltbGtJam8wTXl3aWJtRnRaU0k2SW0xcFlpSXNJbk4wWVhSMWN5STZkSEoxWlgwc2V5SnBaQ0k2TkRRc0ltNWhiV1VpT2lKelpYSjJhV05sSWl3aWMzUmhkSFZ6SWpwMGNuVmxmU3g3SW1sa0lqbzBOU3dpYm1GdFpTSTZJbTV2ZEdsbWFXTmhkR2x2Ym5NaUxDSnpkR0YwZFhNaU9uUnlkV1Y5TEhzaWFXUWlPalEyTENKdVlXMWxJam9pZEdWbGJtRm5aWEp6SWl3aWMzUmhkSFZ6SWpwMGNuVmxmU3g3SW1sa0lqbzBOeXdpYm1GdFpTSTZJbUoxY3kxd1lYSnJhVzVuSWl3aWMzUmhkSFZ6SWpwMGNuVmxmU3g3SW1sa0lqbzBPQ3dpYm1GdFpTSTZJbVJsZEdWamRHOXlJaXdpYzNSaGRIVnpJanAwY25WbGZTeDdJbWxrSWpvME9Td2libUZ0WlNJNkltRmtaQzFqWVcxbGNtRWlMQ0p6ZEdGMGRYTWlPblJ5ZFdWOUxIc2lhV1FpT2pVd0xDSnVZVzFsSWpvaWFYWnpjeTFqYjI1MGNtOXNJaXdpYzNSaGRIVnpJanAwY25WbGZTeDdJbWxrSWpvMU1Td2libUZ0WlNJNklqVjBZWE5vWVdKaWRYTWlMQ0p6ZEdGMGRYTWlPblJ5ZFdWOUxIc2lhV1FpT2pVeUxDSnVZVzFsSWpvaWJHOW5aMlZ5SWl3aWMzUmhkSFZ6SWpwMGNuVmxmU3g3SW1sa0lqbzFNeXdpYm1GdFpTSTZJbk5qYnlJc0luTjBZWFIxY3lJNmRISjFaWDBzZXlKcFpDSTZOVFFzSW01aGJXVWlPaUpzWVc1bmRXRm5aU0lzSW5OMFlYUjFjeUk2ZEhKMVpYMHNleUpwWkNJNk5UVXNJbTVoYldVaU9pSnpkWEJsY25acGMyOXlJaXdpYzNSaGRIVnpJanAwY25WbGZTeDdJbWxrSWpvMU55d2libUZ0WlNJNkltMTVMV2x1YzNCbFkzUnZjaUlzSW5OMFlYUjFjeUk2ZEhKMVpYMHNleUpwWkNJNk5Ua3NJbTVoYldVaU9pSmliMlI1TFdOaGJXVnlZU0lzSW5OMFlYUjFjeUk2ZEhKMVpYMHNleUpwWkNJNk5qQXNJbTVoYldVaU9pSmxiV2xuY21GdWRDSXNJbk4wWVhSMWN5STZkSEoxWlgxZExDSmthWE4wY21samRFbGtJanB1ZFd4c0xDSm9ZWE5vSWpvaVlUTmpaRGswTURRMU4yRXdaakEwWkdFNVpEUTFaRFk0TURSak1ETTNZMlVpZlN3aWFXRjBJam94TnpJMU9UY3hOelF4TENKbGVIQWlPakUzTWpZd05UZ3hOREY5LnZEa3lHaDFPSmVpT0hGV0UtUE5vWVVySm9pNURBWmdLZFNJeGtlYXB1c28nO1xyXG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5jcmVhdGUoeyBiYXNlVVJMIH0pLmdldChgL3YxL2F1dGgvbWUtZnJvbT90b2tlbj0ke3Rva2VufWAsIHtcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIEF1dGhvcml6YXRpb246IGBCYXNpYyAke2J0b2EoYCR7YXBpS2V5fToke2FwaUhhc2h9YCl9YCxcclxuICAgICAgICAneC1kZXZpY2UtdHlwZSc6IERldmljZVR5cGVzRW51bS5XRUIsXHJcbiAgICAgICAgJ3gtYXBwLWxhbmcnOiAnVXotTGF0aW4nLFxyXG4gICAgICAgICd4LWRldmljZS1tb2RlbCc6IEVOVi5pc0Jyb3dzZXJcclxuICAgICAgICAgID8gYCR7bmF2aWdhdG9yLnVzZXJBZ2VudH0gfCAke25hdmlnYXRvci5wbGF0Zm9ybX1gXHJcbiAgICAgICAgICA6IEVOVi5pc05vZGVcclxuICAgICAgICAgID8gYCR7cHJvY2Vzcy5wbGF0Zm9ybX0gfCAke3Byb2Nlc3MuYXJjaH0gfCBOb2RlanM6ICR7cHJvY2Vzcy52ZXJzaW9ufWBcclxuICAgICAgICAgIDogJ1Vua25vd24nLCAvLyBkeW5hbWljYWxseSBmZXRjaGluZyBkZXZpY2UgbW9kZWwgaW5mb1xyXG4gICAgICAgIC8vICd4LWFwcC1sYW5nJzogKGxhbmd1YWdlR2V0dGVyKCkgfHwgJ1V6LUxhdGluJykgYXMgSTE4blR5cGUuTGFuZ1R5cGUsIC8vIGR5bmFtaWNhbGx5IGZldGNoaW5nIGxhbmd1YWdlIGluZm9cclxuICAgICAgICAneC1hcHAtdmVyc2lvbic6IGFwcFZlcnNpb24sXHJcbiAgICAgICAgJ3gtYXBwLXVpZCc6IHVpZCxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGFjY2VzczogZGF0YS5kYXRhLnRva2VuLmFjY2Vzc1Rva2VuLFxyXG4gICAgICByZWZyZXNoOiBkYXRhLmRhdGEudG9rZW4ucmVmcmVzaFRva2VuLFxyXG4gICAgfTtcclxuICAgIC8vIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QoXHJcbiAgICAvLyAgIGAke2Jhc2VVUkx9L3YxL2F1dGgvbG9naW5gLFxyXG4gICAgLy8gICB7XHJcbiAgICAvLyAgICAgdXNlcm5hbWU6ICdVbWFya2hhbicsIC8vIEFkaGFtam9uLCBVbWFya2hhblxyXG4gICAgLy8gICAgIHBhc3N3b3JkOiAnMTIzJyxcclxuICAgIC8vICAgfSxcclxuICAgIC8vICAge1xyXG4gICAgLy8gICAgIGhlYWRlcnM6IHJlcXVpcmVkSGVhZGVycyxcclxuICAgIC8vICAgfSxcclxuICAgIC8vICk7XHJcblxyXG4gICAgLy8gcmV0dXJuIHtcclxuICAgIC8vICAgYWNjZXNzOiByZXMuZGF0YS5kYXRhLnRva2VuLmFjY2Vzc1Rva2VuLFxyXG4gICAgLy8gICByZWZyZXNoOiByZXMuZGF0YS5kYXRhLnRva2VuLnJlZnJlc2hUb2tlbixcclxuICAgIC8vIH07XHJcbiAgfSxcclxuICAvLyBwb2xsaW5nOiB7IGludGVydmFsOiA1XzAwMCwgbGltaXQ6IDEwMCB9LFxyXG59KTtcclxuXHJcbmNvbnNvbGUubG9nKCdTdWNjZXNzIHN0YXJ0ZWQnKTtcclxuXHJcbm1lc3NlbmdlclxyXG4gIC5vbignY29ubmVjdCcsICh7IG1lc3NhZ2UsIHNvY2tldCB9KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnY29ubmVjdGVkJywgbWVzc2FnZSwgc29ja2V0LmlkKTtcclxuICB9KVxyXG4gIC5vbigncmVjb25uZWN0X2F0dGVtcHQnLCAoLi4uYXJncykgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ3JlY29ubmVjdF9hdHRlbXB0JywgYXJncyk7XHJcbiAgfSlcclxuICAub24oJ3JlY29ubmVjdCcsICguLi5hcmdzKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygncmVjb25uZWN0JywgYXJncyk7XHJcbiAgfSlcclxuICAub24oJ2Rpc2Nvbm5lY3QnLCAoeyByZWFzb24sIGRldGFpbHMgfSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ2Rpc2Nvbm5lY3QnLCByZWFzb24pO1xyXG4gIH0pXHJcbiAgLm9uKCdwb25nJywgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ3BvbmcnKTtcclxuICB9KVxyXG4gIC5vbigndXBkYXRlJywgKGRhdGE6IElPblVwZGF0ZSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coZGF0YS5faWQsICd1cGRhdGUnKTtcclxuICB9KVxyXG4gIC5vbignY2hhdEFjdGlvbicsIChhY3Rpb24pID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGFjdGlvbiwgJ2NoYXRBY3Rpb24nKTtcclxuICB9KVxyXG4gIC5vbignc29ja2V0Q29ubmVjdGlvbkVycm9yJywgKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5sb2coZXJyKTtcclxuICB9KTtcclxuXHJcbmNvbnN0IGdldFJhZG9tTnVtYmVyID0gKGZyb206IG51bWJlciwgdG86IG51bWJlcikgPT4gZnJvbSArIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqICh0byAtIGZyb20pKTtcclxuXHJcbihhc3luYyAoKSA9PiB7XHJcbiAgbGV0IG1lc3NhZ2U6IElTZW5kTWVzc2FnZTtcclxuICBjb25zdCByYW5kb20gPSBnZXRSYWRvbU51bWJlcigwLCAxMDApO1xyXG4gIC8vIGNvbnN0IHJhbmRvbSA9IDM7XHJcbiAgaWYgKHJhbmRvbSAlIDIgPT09IDApIHtcclxuICAgIG1lc3NhZ2UgPSB7XHJcbiAgICAgIG1lc3NhZ2VUeXBlOiAndGV4dCcsXHJcbiAgICAgIHRvOiB7IGNoYXRUeXBlOiAncHJpdmF0ZScsIGNoYXRJZDogY2hhdElkIH0sXHJcbiAgICAgIHRleHQ6IGBUZXN0IHhhYmFyICR7TWF0aC5yYW5kb20oKSAqIDEwMH0uIFRpbWU6ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfWAsXHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCB3YW50ZWQ6IElTZW5kQ2hhdE1lc3NhZ2VXYW50ZWQgPSB7XHJcbiAgICAgIHR5cGU6ICd1c2VyJyxcclxuICAgICAgdGl0bGU6ICdNVkQtUWlkaXJ1dicsXHJcbiAgICAgIGRhdGFiYXNlTmFtZTogJ01WRC1RaWRpcnV2JyxcclxuICAgICAgcFVzZXI6IHtcclxuICAgICAgICBpbWFnZTpcclxuICAgICAgICAgICdodHRwOi8vbG9jYWxob3N0OjMwMDAvdjEvZmlsZXMvcHJvZmlsZV9waG90b3MvZDFkZjg4ZGMtNjJiNi00YmE3LTlhNWYtOTY2OWJlOTA0MGEzLkpQRUcnLFxyXG4gICAgICAgIC8vIGZ1bGxJbWFnZTogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC92MS9maWxlcy9wcm9maWxlX3Bob3Rvcy9kMWRmODhkYy02MmI2LTRiYTctOWE1Zi05NjY5YmU5MDQwYTMuSlBFRycsXHJcbiAgICAgICAgZnVsbE5hbWU6ICdRYW1iYXJvdiBRdW1yaW5pc28gUXVsbWlkZGluIHFpemknLFxyXG4gICAgICAgIGFkZHJlc3M6ICdRYXNocWFkYXJ5byBWaWxveWF0LCBLaXRvYiBUdW1hbiwgUWFzaHFpciBxaXNobG9xJyxcclxuICAgICAgICBwYXNzcG9ydDogJ0FBODQzMjcyMCcsXHJcbiAgICAgICAgYmlydGhEYXRlOiAnMTkuMDUuMTk4MScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHdhbnRlZFVzZXI6IHtcclxuICAgICAgICBpbWFnZTpcclxuICAgICAgICAgICdodHRwOi8vbG9jYWxob3N0OjMwMDAvdjEvZmlsZXMvcHJvZmlsZV9waG90b3MvZDFkZjg4ZGMtNjJiNi00YmE3LTlhNWYtOTY2OWJlOTA0MGEzLkpQRUcnLFxyXG4gICAgICAgIC8vIGZ1bGxJbWFnZTogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC92MS9maWxlcy9wcm9maWxlX3Bob3Rvcy9kMWRmODhkYy02MmI2LTRiYTctOWE1Zi05NjY5YmU5MDQwYTMuSlBFRycsXHJcbiAgICAgICAgZnVsbE5hbWU6ICdRYW1iYXJvdiBRdW1yaW5pc28gUXVsbWlkZGluIHFpemknLFxyXG4gICAgICAgIGFkZHJlc3M6ICdRYXNocWFkYXJ5byBWaWxveWF0LCBLaXRvYiBUdW1hbiwgUWFzaHFpciBxaXNobG9xJyxcclxuICAgICAgICBwYXNzcG9ydDogJ0FBODQzMjcyMCcsXHJcbiAgICAgICAgYmlydGhEYXRlOiAnMTkuMDUuMTk4MScsXHJcbiAgICAgIH0sXHJcbiAgICAgIGNhcjoge1xyXG4gICAgICAgIGNhckltYWdlOlxyXG4gICAgICAgICAgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC92MS9maWxlcy9wcm9maWxlX3Bob3Rvcy9kMWRmODhkYy02MmI2LTRiYTctOWE1Zi05NjY5YmU5MDQwYTMuSlBFRycsXHJcbiAgICAgICAgY2FyTnVtYmVyOiAnMDFPMDEwT08nLFxyXG4gICAgICB9LFxyXG4gICAgICB0YWtlbkltYWdlOlxyXG4gICAgICAgICdodHRwOi8vbG9jYWxob3N0OjMwMDAvdjEvZmlsZXMvcHJvZmlsZV9waG90b3MvZDFkZjg4ZGMtNjJiNi00YmE3LTlhNWYtOTY2OWJlOTA0MGEzLkpQRUcnLFxyXG4gICAgICBmdWxsSW1hZ2U6XHJcbiAgICAgICAgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC92MS9maWxlcy9wcm9maWxlX3Bob3Rvcy9kMWRmODhkYy02MmI2LTRiYTctOWE1Zi05NjY5YmU5MDQwYTMuSlBFRycsXHJcbiAgICAgIGluaXRpYXRvcjogJ9CW0JDQm9CQ0JrQo9CU0KPQmtCh0JrQmNCZINCg0J7QktCUJyxcclxuICAgICAgYWRkcmVzczogJ9Ci0YPRgNC60LjRgdGC0L7QvSDQutGe0YfQsNGB0LgsIERlaHFvbiBib3pvcmknLFxyXG4gICAgICB0ZXh0OiBgVGVzdCB4YWJhciAke01hdGgucmFuZG9tKCkgKiAxMDB9LiBUaW1lOiAke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gLFxyXG5cclxuICAgICAgbWVyYTogJ9CQ0KDQldCh0KInLFxyXG4gICAgICByZWdpb246ICfQntCb0JzQkNCb0JjQmiDQqNCQ0rLQoNCYJyxcclxuICAgICAgc3RhdHlhOiAnMTM5INGHLjMg0L8u0JA7MTQwINGHLjEnLFxyXG4gICAgICByb3pUeXBlOiAn0JzQldCW0JPQntCh0KPQlNCQ0KDQodCi0JLQldCd0J3Qq9CZINCgJyxcclxuICAgICAgbG9jYXRpb246IFs0MC44NDc2NDYzMTQwNzQzNCwgNjkuNjE3NTc2Mjg4NjQxNDZdLFxyXG4gICAgICAvLyBmdWxsSW1hZ2U6ICdpdnNzX2ltYWdlcy9mdWxsX2ltYWdlXzBhYjFjZWNlLWQ4YmMtNDJlYS1hZjZhLTA2NzIwNjgxMGRiZC5qcGcnLFxyXG4gICAgICAvLyB0YWtlbkltYWdlOiAnaXZzc19pbWFnZXMvdGFrZW5faW1hZ2VfNDdmYmM2MDItNjVlYS00NjBhLWJiZDgtMDUxYzlkZjk0NmYwLmpwZycsXHJcbiAgICAgIG9iamVjdE5hbWU6ICfQlNC10YXSm9C+0L0g0LHQvtC30L7RgNC4JyxcclxuICAgICAgd2FudGVkRGF0ZTogbmV3IERhdGUoJzA3LjMxLjIwMTknKS50b0lTT1N0cmluZygpLFxyXG4gICAgfTtcclxuICAgIGlmIChyYW5kb20gJSAzID09PSAwKSB7XHJcbiAgICAgIHdhbnRlZC5wVXNlciA9IG51bGw7XHJcbiAgICAgIHdhbnRlZC53YW50ZWRVc2VyID0gbnVsbDtcclxuICAgICAgd2FudGVkLnR5cGUgPSAnY2FyJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdhbnRlZC5jYXIgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIG1lc3NhZ2UgPSB7XHJcbiAgICAgIG1lc3NhZ2VUeXBlOiAnd2FudGVkJyxcclxuICAgICAgdG86IHsgY2hhdFR5cGU6ICdwcml2YXRlJywgY2hhdElkOiBjaGF0SWQgfSxcclxuICAgICAgd2FudGVkOiB3YW50ZWQsXHJcbiAgICAgIHRleHQ6IG51bGwsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYXdhaXQgbmV3IFByb21pc2UoKHJlcykgPT4gbWVzc2VuZ2VyLm9uKCdjb25uZWN0JywgcmVzKSk7XHJcblxyXG4gIC8vIGF3YWl0IG1lc3NlbmdlclxyXG4gIC8vICAgLnNlbmRNZXNzYWdlKG1lc3NhZ2UpXHJcbiAgLy8gICAudGhlbigocmVzKSA9PiB7XHJcbiAgLy8gICAgIGNvbnNvbGUubG9nKHJlcywgJ1N1Y2Nlc3Mgc2VuZGVkJyk7XHJcbiAgLy8gICAgIHJldHVybiByZXMuZGF0YTtcclxuICAvLyAgIH0pXHJcbiAgLy8gICAuY2F0Y2goKGVycikgPT4ge1xyXG4gIC8vICAgICBjb25zb2xlLmxvZyhlcnIucmVzcG9uc2U/LmRhdGEsICdlcnInKTtcclxuICAvLyAgIH0pO1xyXG59KSgpO1xyXG4iXX0=