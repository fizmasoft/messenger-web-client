import { __awaiter } from "tslib";
import axios from 'axios';
import { v1 as uuidV1 } from 'uuid';
// import { ENV } from '../common/config';
import { ENV, getMessenger } from '../index';
import { DeviceTypesEnum } from '../types/types';
import { localStg } from '../utils';
const baseURL = 'http://localhost:7000';
const localUid = localStg.get('messengerDeviceUid');
const uid = localUid ? localUid : uuidV1();
localStg.set('messengerDeviceUid', uid);
const chatId = '66cc25d3c1875cfa0dddfa20'; // ! rm
let appVersion = '1.0.0';
const apiKey = 'qalqon';
const apiHash = '66b3576d917425b29a3e3644';
const messenger = getMessenger({
    baseURL,
    apiKey,
    apiHash,
    languageGetter() {
        return 'Uz-Latin';
    },
    token: () => __awaiter(void 0, void 0, void 0, function* () {
        const token = process.env.TOKEN;
        const { data } = yield axios.create({ baseURL }).get(`/v1/auth/me-from?token=${token}`, {
            headers: {
                Authorization: `Basic ${btoa(`${apiKey}:${apiHash}`)}`,
                'x-device-type': DeviceTypesEnum.WEB,
                'x-app-lang': 'Uz-Latin',
                'x-device-model': ENV.isBrowser
                    ? `${navigator.userAgent} | ${navigator.platform}`
                    : ENV.isNode
                        ? `${process.platform} | ${process.arch} | Nodejs: ${process.version}`
                        : 'Unknown', // dynamically fetching device model info
                // 'x-app-lang': (languageGetter() || 'Uz-Latin') as I18nType.LangType, // dynamically fetching language info
                'x-app-version': appVersion,
                'x-app-uid': uid,
            },
        });
        console.log(data);
        return {
            access: data.data.token.accessToken,
            refresh: data.data.token.refreshToken,
        };
        // const res = await axios.post(
        //   `${baseURL}/v1/auth/login`,
        //   {
        //     username: 'Umarkhan', // Adhamjon, Umarkhan
        //     password: '123',
        //   },
        //   {
        //     headers: requiredHeaders,
        //   },
        // );
        // return {
        //   access: res.data.data.token.accessToken,
        //   refresh: res.data.data.token.refreshToken,
        // };
    }),
    // polling: { interval: 5_000, limit: 100 },
});
console.log('Success started');
messenger
    .on('connect', ({ message, socket }) => {
    console.log('connected', message, socket.id);
})
    .on('reconnect_attempt', (...args) => {
    console.log('reconnect_attempt', args);
})
    .on('reconnect', (...args) => {
    console.log('reconnect', args);
})
    .on('disconnect', ({ reason, details }) => {
    console.log('disconnect', reason);
})
    .on('pong', () => {
    console.log('pong');
})
    .on('update', (data) => {
    console.log('data', data, 'update');
})
    .on('chatAction', (action) => {
    console.log(action, 'chatAction');
})
    .on('socketConnectionError', (err) => {
    console.log(err);
});
const getRadomNumber = (from, to) => from + Math.round(Math.random() * (to - from));
(() => __awaiter(void 0, void 0, void 0, function* () {
    let message;
    const random = getRadomNumber(0, 100);
    // const random = 3;
    if (random % 2 === 0) {
        message = {
            messageType: 'text',
            // to: { chatType: 'private', chatId: chatId },
            text: `Test xabar ${Math.random() * 100}. Time: ${new Date().toISOString()}`,
        };
    }
    else {
        const wanted = {
            type: 'user',
            title: 'MVD-Qidiruv',
            databaseName: 'MVD-Qidiruv',
            pUser: {
                image: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
                // fullImage: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
                fullName: 'Qambarov Qumriniso Qulmiddin qizi',
                address: 'Qashqadaryo Viloyat, Kitob Tuman, Qashqir qishloq',
                passport: 'AA8432720',
                birthDate: '19.05.1981',
            },
            wantedUser: {
                image: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
                // fullImage: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
                fullName: 'Qambarov Qumriniso Qulmiddin qizi',
                address: 'Qashqadaryo Viloyat, Kitob Tuman, Qashqir qishloq',
                passport: 'AA8432720',
                birthDate: '19.05.1981',
            },
            car: {
                carImage: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
                carNumber: '01O010OO',
            },
            takenImage: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
            fullImage: 'http://localhost:3000/v1/files/profile_photos/d1df88dc-62b6-4ba7-9a5f-9669be9040a3.JPEG',
            initiator: 'ЖАЛАКУДУКСКИЙ РОВД',
            address: 'Туркистон кўчаси, Dehqon bozori',
            text: `Test xabar ${Math.random() * 100}. Time: ${new Date().toISOString()}`,
            mera: 'АРЕСТ',
            region: 'ОЛМАЛИК ШАҲРИ',
            statya: '139 ч.3 п.А;140 ч.1',
            rozType: 'МЕЖГОСУДАРСТВЕННЫЙ Р',
            location: [40.84764631407434, 69.61757628864146],
            // fullImage: 'ivss_images/full_image_0ab1cece-d8bc-42ea-af6a-067206810dbd.jpg',
            // takenImage: 'ivss_images/taken_image_47fbc602-65ea-460a-bbd8-051c9df946f0.jpg',
            objectName: 'Дехқон бозори',
            wantedDate: new Date('07.31.2019').toISOString(),
        };
        if (random % 3 === 0) {
            wanted.pUser = null;
            wanted.wantedUser = null;
            wanted.type = 'car';
        }
        else {
            wanted.car = null;
        }
        message = {
            messageType: 'wanted',
            // to: { chatType: 'private', chatId: chatId },
            wanted: wanted,
            text: null,
        };
    }
    yield new Promise((res) => messenger.on('connect', res));
    // await messenger
    //   .sendMessage(message)
    //   .then((res) => {
    //     console.log(res, 'Success sended');
    //     return res.data;
    //   })
    //   .catch((err) => {
    //     console.log(err.response?.data, 'err');
    //   });
}))();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXhhbXBsZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsRUFBRSxJQUFJLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwQywwQ0FBMEM7QUFDMUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHN0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFcEMsTUFBTSxPQUFPLEdBQUcsdUJBQXVCLENBQUM7QUFDeEMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3BELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUMzQyxRQUFRLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBRXhDLE1BQU0sTUFBTSxHQUFHLDBCQUEwQixDQUFDLENBQUMsT0FBTztBQUNsRCxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUM7QUFFekIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBQ3hCLE1BQU0sT0FBTyxHQUFHLDBCQUEwQixDQUFDO0FBRTNDLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQztJQUM3QixPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxjQUFjO1FBQ1osT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUNELEtBQUssRUFBRSxHQUdKLEVBQUU7UUFDSCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUNoQyxNQUFNLEVBQUUsSUFBSSxF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Q0FBQztJQUVELE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFekQsa0JBQWtCO0lBQ2xCLDBCQUEwQjtJQUMxQixxQkFBcUI7SUFDckIsMENBQTBDO0lBQzFDLHVCQUF1QjtJQUN2QixPQUFPO0lBQ1Asc0JBQXNCO0lBQ3RCLDhDQUE4QztJQUM5QyxRQUFRO0FBQ1YsQ0FBQyxDQUFBLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgdjEgYXMgdXVpZFYxIH0gZnJvbSAndXVpZCc7XHJcbi8vIGltcG9ydCB7IEVOViB9IGZyb20gJy4uL2NvbW1vbi9jb25maWcnO1xyXG5pbXBvcnQgeyBFTlYsIGdldE1lc3NlbmdlciB9IGZyb20gJy4uL2luZGV4JztcclxuaW1wb3J0IHsgSVNlbmRDaGF0TWVzc2FnZVdhbnRlZCwgSVNlbmRNZXNzYWdlIH0gZnJvbSAnLi4vdHlwZXMvYXBpL21lc3NhZ2UnO1xyXG5pbXBvcnQgeyBJT25VcGRhdGUgfSBmcm9tICcuLi90eXBlcy9hcGkvbWVzc2FnZS50eXBlcyc7XHJcbmltcG9ydCB7IERldmljZVR5cGVzRW51bSB9IGZyb20gJy4uL3R5cGVzL3R5cGVzJztcclxuaW1wb3J0IHsgbG9jYWxTdGcgfSBmcm9tICcuLi91dGlscyc7XHJcblxyXG5jb25zdCBiYXNlVVJMID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6NzAwMCc7XHJcbmNvbnN0IGxvY2FsVWlkID0gbG9jYWxTdGcuZ2V0KCdtZXNzZW5nZXJEZXZpY2VVaWQnKTtcclxuY29uc3QgdWlkID0gbG9jYWxVaWQgPyBsb2NhbFVpZCA6IHV1aWRWMSgpO1xyXG5sb2NhbFN0Zy5zZXQoJ21lc3NlbmdlckRldmljZVVpZCcsIHVpZCk7XHJcblxyXG5jb25zdCBjaGF0SWQgPSAnNjZjYzI1ZDNjMTg3NWNmYTBkZGRmYTIwJzsgLy8gISBybVxyXG5sZXQgYXBwVmVyc2lvbiA9ICcxLjAuMCc7XHJcblxyXG5jb25zdCBhcGlLZXkgPSAncWFscW9uJztcclxuY29uc3QgYXBpSGFzaCA9ICc2NmIzNTc2ZDkxNzQyNWIyOWEzZTM2NDQnO1xyXG5cclxuY29uc3QgbWVzc2VuZ2VyID0gZ2V0TWVzc2VuZ2VyKHtcclxuICBiYXNlVVJMLFxyXG4gIGFwaUtleSxcclxuICBhcGlIYXNoLFxyXG4gIGxhbmd1YWdlR2V0dGVyKCkge1xyXG4gICAgcmV0dXJuICdVei1MYXRpbic7XHJcbiAgfSxcclxuICB0b2tlbjogYXN5bmMgKCk6IFByb21pc2U8e1xyXG4gICAgYWNjZXNzOiBzdHJpbmc7XHJcbiAgICByZWZyZXNoOiBzdHJpbmc7XHJcbiAgfT4gPT4ge1xyXG4gICAgY29uc3QgdG9rZW4gPSBwcm9jZXNzLmVudi5UT0tFTjtcclxuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgYXhpb3MuY3JlYXRlKHsgYmFzZVVSTCB9KS5nZXQoYC92MS9hdXRoL21lLWZyb20/dG9rZW49JHt0b2tlbn1gLCB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBBdXRob3JpemF0aW9uOiBgQmFzaWMgJHtidG9hKGAke2FwaUtleX06JHthcGlIYXNofWApfWAsXHJcbiAgICAgICAgJ3gtZGV2aWNlLXR5cGUnOiBEZXZpY2VUeXBlc0VudW0uV0VCLFxyXG4gICAgICAgICd4LWFwcC1sYW5nJzogJ1V6LUxhdGluJyxcclxuICAgICAgICAneC1kZXZpY2UtbW9kZWwnOiBFTlYuaXNCcm93c2VyXHJcbiAgICAgICAgICA/IGAke25hdmlnYXRvci51c2VyQWdlbnR9IHwgJHtuYXZpZ2F0b3IucGxhdGZvcm19YFxyXG4gICAgICAgICAgOiBFTlYuaXNOb2RlXHJcbiAgICAgICAgICA/IGAke3Byb2Nlc3MucGxhdGZvcm19IHwgJHtwcm9jZXNzLmFyY2h9IHwgTm9kZWpzOiAke3Byb2Nlc3MudmVyc2lvbn1gXHJcbiAgICAgICAgICA6ICdVbmtub3duJywgLy8gZHluYW1pY2FsbHkgZmV0Y2hpbmcgZGV2aWNlIG1vZGVsIGluZm9cclxuICAgICAgICAvLyAneC1hcHAtbGFuZyc6IChsYW5ndWFnZUdldHRlcigpIHx8ICdVei1MYXRpbicpIGFzIEkxOG5UeXBlLkxhbmdUeXBlLCAvLyBkeW5hbWljYWxseSBmZXRjaGluZyBsYW5ndWFnZSBpbmZvXHJcbiAgICAgICAgJ3gtYXBwLXZlcnNpb24nOiBhcHBWZXJzaW9uLFxyXG4gICAgICAgICd4LWFwcC11aWQnOiB1aWQsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGFjY2VzczogZGF0YS5kYXRhLnRva2VuLmFjY2Vzc1Rva2VuLFxyXG4gICAgICByZWZyZXNoOiBkYXRhLmRhdGEudG9rZW4ucmVmcmVzaFRva2VuLFxyXG4gICAgfTtcclxuICAgIC8vIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QoXHJcbiAgICAvLyAgIGAke2Jhc2VVUkx9L3YxL2F1dGgvbG9naW5gLFxyXG4gICAgLy8gICB7XHJcbiAgICAvLyAgICAgdXNlcm5hbWU6ICdVbWFya2hhbicsIC8vIEFkaGFtam9uLCBVbWFya2hhblxyXG4gICAgLy8gICAgIHBhc3N3b3JkOiAnMTIzJyxcclxuICAgIC8vICAgfSxcclxuICAgIC8vICAge1xyXG4gICAgLy8gICAgIGhlYWRlcnM6IHJlcXVpcmVkSGVhZGVycyxcclxuICAgIC8vICAgfSxcclxuICAgIC8vICk7XHJcblxyXG4gICAgLy8gcmV0dXJuIHtcclxuICAgIC8vICAgYWNjZXNzOiByZXMuZGF0YS5kYXRhLnRva2VuLmFjY2Vzc1Rva2VuLFxyXG4gICAgLy8gICByZWZyZXNoOiByZXMuZGF0YS5kYXRhLnRva2VuLnJlZnJlc2hUb2tlbixcclxuICAgIC8vIH07XHJcbiAgfSxcclxuICAvLyBwb2xsaW5nOiB7IGludGVydmFsOiA1XzAwMCwgbGltaXQ6IDEwMCB9LFxyXG59KTtcclxuXHJcbmNvbnNvbGUubG9nKCdTdWNjZXNzIHN0YXJ0ZWQnKTtcclxuXHJcbm1lc3NlbmdlclxyXG4gIC5vbignY29ubmVjdCcsICh7IG1lc3NhZ2UsIHNvY2tldCB9KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnY29ubmVjdGVkJywgbWVzc2FnZSwgc29ja2V0LmlkKTtcclxuICB9KVxyXG4gIC5vbigncmVjb25uZWN0X2F0dGVtcHQnLCAoLi4uYXJncykgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ3JlY29ubmVjdF9hdHRlbXB0JywgYXJncyk7XHJcbiAgfSlcclxuICAub24oJ3JlY29ubmVjdCcsICguLi5hcmdzKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygncmVjb25uZWN0JywgYXJncyk7XHJcbiAgfSlcclxuICAub24oJ2Rpc2Nvbm5lY3QnLCAoeyByZWFzb24sIGRldGFpbHMgfSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ2Rpc2Nvbm5lY3QnLCByZWFzb24pO1xyXG4gIH0pXHJcbiAgLm9uKCdwb25nJywgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ3BvbmcnKTtcclxuICB9KVxyXG4gIC5vbigndXBkYXRlJywgKGRhdGE6IElPblVwZGF0ZSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ2RhdGEnLCBkYXRhLCAndXBkYXRlJyk7XHJcbiAgfSlcclxuICAub24oJ2NoYXRBY3Rpb24nLCAoYWN0aW9uKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhhY3Rpb24sICdjaGF0QWN0aW9uJyk7XHJcbiAgfSlcclxuICAub24oJ3NvY2tldENvbm5lY3Rpb25FcnJvcicsIChlcnIpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgfSk7XHJcblxyXG5jb25zdCBnZXRSYWRvbU51bWJlciA9IChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+IGZyb20gKyBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAodG8gLSBmcm9tKSk7XHJcblxyXG4oYXN5bmMgKCkgPT4ge1xyXG4gIGxldCBtZXNzYWdlOiBJU2VuZE1lc3NhZ2U7XHJcbiAgY29uc3QgcmFuZG9tID0gZ2V0UmFkb21OdW1iZXIoMCwgMTAwKTtcclxuICAvLyBjb25zdCByYW5kb20gPSAzO1xyXG4gIGlmIChyYW5kb20gJSAyID09PSAwKSB7XHJcbiAgICBtZXNzYWdlID0ge1xyXG4gICAgICBtZXNzYWdlVHlwZTogJ3RleHQnLFxyXG4gICAgICAvLyB0bzogeyBjaGF0VHlwZTogJ3ByaXZhdGUnLCBjaGF0SWQ6IGNoYXRJZCB9LFxyXG4gICAgICB0ZXh0OiBgVGVzdCB4YWJhciAke01hdGgucmFuZG9tKCkgKiAxMDB9LiBUaW1lOiAke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gLFxyXG4gICAgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3Qgd2FudGVkOiBJU2VuZENoYXRNZXNzYWdlV2FudGVkID0ge1xyXG4gICAgICB0eXBlOiAndXNlcicsXHJcbiAgICAgIHRpdGxlOiAnTVZELVFpZGlydXYnLFxyXG4gICAgICBkYXRhYmFzZU5hbWU6ICdNVkQtUWlkaXJ1dicsXHJcbiAgICAgIHBVc2VyOiB7XHJcbiAgICAgICAgaW1hZ2U6XHJcbiAgICAgICAgICAnaHR0cDovL2xvY2FsaG9zdDozMDAwL3YxL2ZpbGVzL3Byb2ZpbGVfcGhvdG9zL2QxZGY4OGRjLTYyYjYtNGJhNy05YTVmLTk2NjliZTkwNDBhMy5KUEVHJyxcclxuICAgICAgICAvLyBmdWxsSW1hZ2U6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvdjEvZmlsZXMvcHJvZmlsZV9waG90b3MvZDFkZjg4ZGMtNjJiNi00YmE3LTlhNWYtOTY2OWJlOTA0MGEzLkpQRUcnLFxyXG4gICAgICAgIGZ1bGxOYW1lOiAnUWFtYmFyb3YgUXVtcmluaXNvIFF1bG1pZGRpbiBxaXppJyxcclxuICAgICAgICBhZGRyZXNzOiAnUWFzaHFhZGFyeW8gVmlsb3lhdCwgS2l0b2IgVHVtYW4sIFFhc2hxaXIgcWlzaGxvcScsXHJcbiAgICAgICAgcGFzc3BvcnQ6ICdBQTg0MzI3MjAnLFxyXG4gICAgICAgIGJpcnRoRGF0ZTogJzE5LjA1LjE5ODEnLFxyXG4gICAgICB9LFxyXG4gICAgICB3YW50ZWRVc2VyOiB7XHJcbiAgICAgICAgaW1hZ2U6XHJcbiAgICAgICAgICAnaHR0cDovL2xvY2FsaG9zdDozMDAwL3YxL2ZpbGVzL3Byb2ZpbGVfcGhvdG9zL2QxZGY4OGRjLTYyYjYtNGJhNy05YTVmLTk2NjliZTkwNDBhMy5KUEVHJyxcclxuICAgICAgICAvLyBmdWxsSW1hZ2U6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvdjEvZmlsZXMvcHJvZmlsZV9waG90b3MvZDFkZjg4ZGMtNjJiNi00YmE3LTlhNWYtOTY2OWJlOTA0MGEzLkpQRUcnLFxyXG4gICAgICAgIGZ1bGxOYW1lOiAnUWFtYmFyb3YgUXVtcmluaXNvIFF1bG1pZGRpbiBxaXppJyxcclxuICAgICAgICBhZGRyZXNzOiAnUWFzaHFhZGFyeW8gVmlsb3lhdCwgS2l0b2IgVHVtYW4sIFFhc2hxaXIgcWlzaGxvcScsXHJcbiAgICAgICAgcGFzc3BvcnQ6ICdBQTg0MzI3MjAnLFxyXG4gICAgICAgIGJpcnRoRGF0ZTogJzE5LjA1LjE5ODEnLFxyXG4gICAgICB9LFxyXG4gICAgICBjYXI6IHtcclxuICAgICAgICBjYXJJbWFnZTpcclxuICAgICAgICAgICdodHRwOi8vbG9jYWxob3N0OjMwMDAvdjEvZmlsZXMvcHJvZmlsZV9waG90b3MvZDFkZjg4ZGMtNjJiNi00YmE3LTlhNWYtOTY2OWJlOTA0MGEzLkpQRUcnLFxyXG4gICAgICAgIGNhck51bWJlcjogJzAxTzAxME9PJyxcclxuICAgICAgfSxcclxuICAgICAgdGFrZW5JbWFnZTpcclxuICAgICAgICAnaHR0cDovL2xvY2FsaG9zdDozMDAwL3YxL2ZpbGVzL3Byb2ZpbGVfcGhvdG9zL2QxZGY4OGRjLTYyYjYtNGJhNy05YTVmLTk2NjliZTkwNDBhMy5KUEVHJyxcclxuICAgICAgZnVsbEltYWdlOlxyXG4gICAgICAgICdodHRwOi8vbG9jYWxob3N0OjMwMDAvdjEvZmlsZXMvcHJvZmlsZV9waG90b3MvZDFkZjg4ZGMtNjJiNi00YmE3LTlhNWYtOTY2OWJlOTA0MGEzLkpQRUcnLFxyXG4gICAgICBpbml0aWF0b3I6ICfQltCQ0JvQkNCa0KPQlNCj0JrQodCa0JjQmSDQoNCe0JLQlCcsXHJcbiAgICAgIGFkZHJlc3M6ICfQotGD0YDQutC40YHRgtC+0L0g0LrRntGH0LDRgdC4LCBEZWhxb24gYm96b3JpJyxcclxuICAgICAgdGV4dDogYFRlc3QgeGFiYXIgJHtNYXRoLnJhbmRvbSgpICogMTAwfS4gVGltZTogJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YCxcclxuXHJcbiAgICAgIG1lcmE6ICfQkNCg0JXQodCiJyxcclxuICAgICAgcmVnaW9uOiAn0J7Qm9Cc0JDQm9CY0Jog0KjQkNKy0KDQmCcsXHJcbiAgICAgIHN0YXR5YTogJzEzOSDRhy4zINC/LtCQOzE0MCDRhy4xJyxcclxuICAgICAgcm96VHlwZTogJ9Cc0JXQltCT0J7QodCj0JTQkNCg0KHQotCS0JXQndCd0KvQmSDQoCcsXHJcbiAgICAgIGxvY2F0aW9uOiBbNDAuODQ3NjQ2MzE0MDc0MzQsIDY5LjYxNzU3NjI4ODY0MTQ2XSxcclxuICAgICAgLy8gZnVsbEltYWdlOiAnaXZzc19pbWFnZXMvZnVsbF9pbWFnZV8wYWIxY2VjZS1kOGJjLTQyZWEtYWY2YS0wNjcyMDY4MTBkYmQuanBnJyxcclxuICAgICAgLy8gdGFrZW5JbWFnZTogJ2l2c3NfaW1hZ2VzL3Rha2VuX2ltYWdlXzQ3ZmJjNjAyLTY1ZWEtNDYwYS1iYmQ4LTA1MWM5ZGY5NDZmMC5qcGcnLFxyXG4gICAgICBvYmplY3ROYW1lOiAn0JTQtdGF0pvQvtC9INCx0L7Qt9C+0YDQuCcsXHJcbiAgICAgIHdhbnRlZERhdGU6IG5ldyBEYXRlKCcwNy4zMS4yMDE5JykudG9JU09TdHJpbmcoKSxcclxuICAgIH07XHJcbiAgICBpZiAocmFuZG9tICUgMyA9PT0gMCkge1xyXG4gICAgICB3YW50ZWQucFVzZXIgPSBudWxsO1xyXG4gICAgICB3YW50ZWQud2FudGVkVXNlciA9IG51bGw7XHJcbiAgICAgIHdhbnRlZC50eXBlID0gJ2Nhcic7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3YW50ZWQuY2FyID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBtZXNzYWdlID0ge1xyXG4gICAgICBtZXNzYWdlVHlwZTogJ3dhbnRlZCcsXHJcbiAgICAgIC8vIHRvOiB7IGNoYXRUeXBlOiAncHJpdmF0ZScsIGNoYXRJZDogY2hhdElkIH0sXHJcbiAgICAgIHdhbnRlZDogd2FudGVkLFxyXG4gICAgICB0ZXh0OiBudWxsLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGF3YWl0IG5ldyBQcm9taXNlKChyZXMpID0+IG1lc3Nlbmdlci5vbignY29ubmVjdCcsIHJlcykpO1xyXG5cclxuICAvLyBhd2FpdCBtZXNzZW5nZXJcclxuICAvLyAgIC5zZW5kTWVzc2FnZShtZXNzYWdlKVxyXG4gIC8vICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gIC8vICAgICBjb25zb2xlLmxvZyhyZXMsICdTdWNjZXNzIHNlbmRlZCcpO1xyXG4gIC8vICAgICByZXR1cm4gcmVzLmRhdGE7XHJcbiAgLy8gICB9KVxyXG4gIC8vICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAvLyAgICAgY29uc29sZS5sb2coZXJyLnJlc3BvbnNlPy5kYXRhLCAnZXJyJyk7XHJcbiAgLy8gICB9KTtcclxufSkoKTtcclxuIl19