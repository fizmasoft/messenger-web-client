export function formatDate(date, separator = '-') {
    const locale = 'uz-UZ';
    return {
        date: date,
        iso: date.toISOString(),
        hh_mm: date
            .toLocaleString(locale, {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false,
        })
            .replace(/\//g, separator),
        hh_mm_ss: date
            .toLocaleString(locale, {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false,
        })
            .replace(/\//g, separator),
        YYYY_MM_DD: date
            .toLocaleString(locale, {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
        })
            .replace(/\//g, separator),
        YYYY_MM_DD_hh_mm_ss: date
            .toLocaleString(locale, {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false,
        })
            .replace(/\//g, separator),
    };
}
Date.prototype.toFormatted = function (separator = '-') {
    return formatDate(this, separator);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10by1mb3JtYXR0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL3V0aWxpdHkvZGF0ZS10by1mb3JtYXR0ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFVLEVBQUUsU0FBUyxHQUFHLEdBQUc7SUFDcEQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDO0lBRXZCLE9BQU87UUFDTCxJQUFJLEVBQUUsSUFBSTtRQUNWLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ3ZCLEtBQUssRUFBRSxJQUFJO2FBQ1IsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUN0QixJQUFJLEVBQUUsU0FBUztZQUNmLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQzthQUNELE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDO1FBQzVCLFFBQVEsRUFBRSxJQUFJO2FBQ1gsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUN0QixJQUFJLEVBQUUsU0FBUztZQUNmLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQzthQUNELE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDO1FBQzVCLFVBQVUsRUFBRSxJQUFJO2FBQ2IsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUN0QixHQUFHLEVBQUUsU0FBUztZQUNkLEtBQUssRUFBRSxTQUFTO1lBQ2hCLElBQUksRUFBRSxTQUFTO1NBQ2hCLENBQUM7YUFDRCxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQztRQUM1QixtQkFBbUIsRUFBRSxJQUFJO2FBQ3RCLGNBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDdEIsSUFBSSxFQUFFLFNBQVM7WUFDZixLQUFLLEVBQUUsU0FBUztZQUNoQixHQUFHLEVBQUUsU0FBUztZQUNkLElBQUksRUFBRSxTQUFTO1lBQ2YsTUFBTSxFQUFFLFNBQVM7WUFDakIsTUFBTSxFQUFFLFNBQVM7WUFDakIsTUFBTSxFQUFFLEtBQUs7U0FDZCxDQUFDO2FBQ0QsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUM7S0FDN0IsQ0FBQztBQUNKLENBQUM7QUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFVLFNBQVMsR0FBRyxHQUFHO0lBQ3BELE9BQU8sVUFBVSxDQUFDLElBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlOiBEYXRlLCBzZXBhcmF0b3IgPSAnLScpOiBJRm9ybWF0dGVkRGF0ZSB7XHJcbiAgY29uc3QgbG9jYWxlID0gJ3V6LVVaJztcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGRhdGU6IGRhdGUsXHJcbiAgICBpc286IGRhdGUudG9JU09TdHJpbmcoKSxcclxuICAgIGhoX21tOiBkYXRlXHJcbiAgICAgIC50b0xvY2FsZVN0cmluZyhsb2NhbGUsIHtcclxuICAgICAgICBob3VyOiAnMi1kaWdpdCcsXHJcbiAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXHJcbiAgICAgICAgaG91cjEyOiBmYWxzZSxcclxuICAgICAgfSlcclxuICAgICAgLnJlcGxhY2UoL1xcLy9nLCBzZXBhcmF0b3IpLFxyXG4gICAgaGhfbW1fc3M6IGRhdGVcclxuICAgICAgLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwge1xyXG4gICAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcclxuICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcclxuICAgICAgICBzZWNvbmQ6ICcyLWRpZ2l0JyxcclxuICAgICAgICBob3VyMTI6IGZhbHNlLFxyXG4gICAgICB9KVxyXG4gICAgICAucmVwbGFjZSgvXFwvL2csIHNlcGFyYXRvciksXHJcbiAgICBZWVlZX01NX0REOiBkYXRlXHJcbiAgICAgIC50b0xvY2FsZVN0cmluZyhsb2NhbGUsIHtcclxuICAgICAgICBkYXk6ICcyLWRpZ2l0JyxcclxuICAgICAgICBtb250aDogJzItZGlnaXQnLFxyXG4gICAgICAgIHllYXI6ICdudW1lcmljJyxcclxuICAgICAgfSlcclxuICAgICAgLnJlcGxhY2UoL1xcLy9nLCBzZXBhcmF0b3IpLFxyXG4gICAgWVlZWV9NTV9ERF9oaF9tbV9zczogZGF0ZVxyXG4gICAgICAudG9Mb2NhbGVTdHJpbmcobG9jYWxlLCB7XHJcbiAgICAgICAgeWVhcjogJ251bWVyaWMnLFxyXG4gICAgICAgIG1vbnRoOiAnMi1kaWdpdCcsXHJcbiAgICAgICAgZGF5OiAnMi1kaWdpdCcsXHJcbiAgICAgICAgaG91cjogJzItZGlnaXQnLFxyXG4gICAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxyXG4gICAgICAgIHNlY29uZDogJzItZGlnaXQnLFxyXG4gICAgICAgIGhvdXIxMjogZmFsc2UsXHJcbiAgICAgIH0pXHJcbiAgICAgIC5yZXBsYWNlKC9cXC8vZywgc2VwYXJhdG9yKSxcclxuICB9O1xyXG59XHJcblxyXG5EYXRlLnByb3RvdHlwZS50b0Zvcm1hdHRlZCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IgPSAnLScpIHtcclxuICByZXR1cm4gZm9ybWF0RGF0ZSh0aGlzIGFzIERhdGUsIHNlcGFyYXRvcik7XHJcbn07XHJcblxyXG5leHBvcnQge307XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgaW50ZXJmYWNlIElGb3JtYXR0ZWREYXRlIHtcclxuICAgIGRhdGU6IERhdGU7XHJcbiAgICBpc286IHN0cmluZztcclxuICAgIGhoX21tOiBzdHJpbmc7XHJcbiAgICBoaF9tbV9zczogc3RyaW5nO1xyXG4gICAgWVlZWV9NTV9ERDogc3RyaW5nO1xyXG4gICAgWVlZWV9NTV9ERF9oaF9tbV9zczogc3RyaW5nO1xyXG4gIH1cclxuXHJcbiAgaW50ZXJmYWNlIERhdGUge1xyXG4gICAgdG9Gb3JtYXR0ZWQ6IChzZXBhcmF0b3I/OiBzdHJpbmcpID0+IElGb3JtYXR0ZWREYXRlO1xyXG4gIH1cclxufVxyXG4iXX0=