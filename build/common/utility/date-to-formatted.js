export function formatDate(date, separator = '-') {
    const locale = 'uz-UZ';
    return {
        date: date,
        iso: date.toISOString(),
        hh_mm: date
            .toLocaleString(locale, {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false,
        })
            .replace(/\//g, separator),
        hh_mm_ss: date
            .toLocaleString(locale, {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false,
        })
            .replace(/\//g, separator),
        YYYY_MM_DD: date
            .toLocaleString(locale, {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
        })
            .replace(/\//g, separator),
        YYYY_MM_DD_hh_mm_ss: date
            .toLocaleString(locale, {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false,
        })
            .replace(/\//g, separator),
    };
}
Date.prototype.toFormatted = function (separator = '-') {
    return formatDate(this, separator);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10by1mb3JtYXR0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL3V0aWxpdHkvZGF0ZS10by1mb3JtYXR0ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFVLEVBQUUsU0FBUyxHQUFHLEdBQUc7SUFDcEQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDO0lBRXZCLE9BQU87UUFDTCxJQUFJLEVBQUUsSUFBSTtRQUNWLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ3ZCLEtBQUssRUFBRSxJQUFJO2FBQ1IsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUN0QixJQUFJLEVBQUUsU0FBUztZQUNmLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQzthQUNELE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDO1FBQzVCLFFBQVEsRUFBRSxJQUFJO2FBQ1gsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUN0QixJQUFJLEVBQUUsU0FBUztZQUNmLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQzthQUNELE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDO1FBQzVCLFVBQVUsRUFBRSxJQUFJO2FBQ2IsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUN0QixHQUFHLEVBQUUsU0FBUztZQUNkLEtBQUssRUFBRSxTQUFTO1lBQ2hCLElBQUksRUFBRSxTQUFTO1NBQ2hCLENBQUM7YUFDRCxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQztRQUM1QixtQkFBbUIsRUFBRSxJQUFJO2FBQ3RCLGNBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDdEIsSUFBSSxFQUFFLFNBQVM7WUFDZixLQUFLLEVBQUUsU0FBUztZQUNoQixHQUFHLEVBQUUsU0FBUztZQUNkLElBQUksRUFBRSxTQUFTO1lBQ2YsTUFBTSxFQUFFLFNBQVM7WUFDakIsTUFBTSxFQUFFLFNBQVM7WUFDakIsTUFBTSxFQUFFLEtBQUs7U0FDZCxDQUFDO2FBQ0QsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUM7S0FDN0IsQ0FBQztBQUNKLENBQUM7QUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFVLFNBQVMsR0FBRyxHQUFHO0lBQ3BELE9BQU8sVUFBVSxDQUFDLElBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlOiBEYXRlLCBzZXBhcmF0b3IgPSAnLScpOiBJRm9ybWF0dGVkRGF0ZSB7XG4gIGNvbnN0IGxvY2FsZSA9ICd1ei1VWic7XG5cbiAgcmV0dXJuIHtcbiAgICBkYXRlOiBkYXRlLFxuICAgIGlzbzogZGF0ZS50b0lTT1N0cmluZygpLFxuICAgIGhoX21tOiBkYXRlXG4gICAgICAudG9Mb2NhbGVTdHJpbmcobG9jYWxlLCB7XG4gICAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcbiAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICAgIGhvdXIxMjogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLnJlcGxhY2UoL1xcLy9nLCBzZXBhcmF0b3IpLFxuICAgIGhoX21tX3NzOiBkYXRlXG4gICAgICAudG9Mb2NhbGVTdHJpbmcobG9jYWxlLCB7XG4gICAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcbiAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICAgIHNlY29uZDogJzItZGlnaXQnLFxuICAgICAgICBob3VyMTI6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5yZXBsYWNlKC9cXC8vZywgc2VwYXJhdG9yKSxcbiAgICBZWVlZX01NX0REOiBkYXRlXG4gICAgICAudG9Mb2NhbGVTdHJpbmcobG9jYWxlLCB7XG4gICAgICAgIGRheTogJzItZGlnaXQnLFxuICAgICAgICBtb250aDogJzItZGlnaXQnLFxuICAgICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICB9KVxuICAgICAgLnJlcGxhY2UoL1xcLy9nLCBzZXBhcmF0b3IpLFxuICAgIFlZWVlfTU1fRERfaGhfbW1fc3M6IGRhdGVcbiAgICAgIC50b0xvY2FsZVN0cmluZyhsb2NhbGUsIHtcbiAgICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgICAgICBtb250aDogJzItZGlnaXQnLFxuICAgICAgICBkYXk6ICcyLWRpZ2l0JyxcbiAgICAgICAgaG91cjogJzItZGlnaXQnLFxuICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgc2Vjb25kOiAnMi1kaWdpdCcsXG4gICAgICAgIGhvdXIxMjogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLnJlcGxhY2UoL1xcLy9nLCBzZXBhcmF0b3IpLFxuICB9O1xufVxuXG5EYXRlLnByb3RvdHlwZS50b0Zvcm1hdHRlZCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IgPSAnLScpIHtcbiAgcmV0dXJuIGZvcm1hdERhdGUodGhpcyBhcyBEYXRlLCBzZXBhcmF0b3IpO1xufTtcblxuZXhwb3J0IHt9O1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBJRm9ybWF0dGVkRGF0ZSB7XG4gICAgZGF0ZTogRGF0ZTtcbiAgICBpc286IHN0cmluZztcbiAgICBoaF9tbTogc3RyaW5nO1xuICAgIGhoX21tX3NzOiBzdHJpbmc7XG4gICAgWVlZWV9NTV9ERDogc3RyaW5nO1xuICAgIFlZWVlfTU1fRERfaGhfbW1fc3M6IHN0cmluZztcbiAgfVxuXG4gIGludGVyZmFjZSBEYXRlIHtcbiAgICB0b0Zvcm1hdHRlZDogKHNlcGFyYXRvcj86IHN0cmluZykgPT4gSUZvcm1hdHRlZERhdGU7XG4gIH1cbn1cbiJdfQ==