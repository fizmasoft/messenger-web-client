import { __awaiter } from "tslib";
import FormData from 'form-data';
import http from 'http';
import https from 'https';
const bodyIsRequired = {
    GET: false,
    POST: true,
};
export function request(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        if (bodyIsRequired[opts.method])
            opts.body = opts.body || '{}';
        const reqOptions = {
            method: opts.method,
            headers: opts.body instanceof FormData
                ? (_c = (_b = (_a = opts.body).getHeaders) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : { 'Content-Type': 'multipart/form-data' }
                : opts.headers
                    ? opts.headers
                    : {
                        'Content-Type': 'application/json',
                    },
        };
        const func = opts.url.includes('https://', 0) ? https.request : http.request;
        return yield new Promise((resolve, reject) => {
            const req = func(opts.url, reqOptions, (res) => {
                let data = '';
                res
                    .on('data', (chunk) => {
                    data = data + chunk.toString();
                })
                    .on('end', () => {
                    resolve(JSON.parse(data));
                })
                    .on('error', (err) => {
                    console.log(err, 'error while res');
                    reject(err);
                });
            });
            if (opts.body instanceof FormData) {
                opts.body.pipe(req);
            }
            else {
                req.write(opts.body);
            }
            req
                .on('error', (err) => {
                console.log(err, 'error while req');
                reject(err);
            })
                .end();
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC1odHRwcy1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1vbi91dGlsaXR5L3JlcXVlc3Qvc2VuZC1odHRwcy1yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLFFBQVEsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sS0FBeUIsTUFBTSxPQUFPLENBQUM7QUFpQzlDLE1BQU0sY0FBYyxHQUFpQztJQUNuRCxHQUFHLEVBQUUsS0FBSztJQUNWLElBQUksRUFBRSxJQUFJO0NBQ1gsQ0FBQztBQUVGLE1BQU0sVUFBZ0IsT0FBTyxDQUFDLElBQTBCOzs7UUFDdEQsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7UUFFL0QsTUFBTSxVQUFVLEdBQW1CO1lBQ2pDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixPQUFPLEVBQ0wsSUFBSSxDQUFDLElBQUksWUFBWSxRQUFRO2dCQUMzQixDQUFDLENBQUMsTUFBQSxNQUFBLE1BQUEsSUFBSSxDQUFDLElBQUksRUFBQyxVQUFVLGtEQUFJLG1DQUFJLEVBQUUsY0FBYyxFQUFFLHFCQUFxQixFQUFFO2dCQUN2RSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU87b0JBQ2QsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPO29CQUNkLENBQUMsQ0FBQzt3QkFDRSxjQUFjLEVBQUUsa0JBQWtCO3FCQUNuQztTQUNSLENBQUM7UUFFRixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDN0UsT0FBTyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzNDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUM3QyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7Z0JBQ2QsR0FBRztxQkFDQSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQ3BCLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNqQyxDQUFDLENBQUM7cUJBQ0QsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7b0JBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDO3FCQUNELEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtvQkFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztvQkFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLElBQUksQ0FBQyxJQUFJLFlBQVksUUFBUSxFQUFFLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLENBQUM7aUJBQU0sQ0FBQztnQkFDTixHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QixDQUFDO1lBRUQsR0FBRztpQkFDQSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUM7Z0JBQ3BDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNkLENBQUMsQ0FBQztpQkFDRCxHQUFHLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZvcm1EYXRhIGZyb20gJ2Zvcm0tZGF0YSc7XG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCBodHRwcywgeyBSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ2h0dHBzJztcblxudHlwZSBCYXNlUmVxdWVzdEhlYWRlcnNMaXN0ID1cbiAgfCAnQWNjZXB0J1xuICB8ICdDb250ZW50LUxlbmd0aCdcbiAgfCAnVXNlci1BZ2VudCdcbiAgfCAnQ29udGVudC1FbmNvZGluZydcbiAgfCAnQXV0aG9yaXphdGlvbic7XG5cbnR5cGUgQ29udGVudFR5cGUgPVxuICB8ICd0ZXh0L2h0bWwnXG4gIHwgJ3RleHQvcGxhaW4nXG4gIHwgJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gIHwgJ2FwcGxpY2F0aW9uL2pzb24nXG4gIHwgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgfCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJztcblxuZXhwb3J0IHR5cGUgUmF3UmVxdWVzdEhlYWRlcnMgPSBQYXJ0aWFsPFxuICB7XG4gICAgW0tleSBpbiBCYXNlUmVxdWVzdEhlYWRlcnNMaXN0XTogYW55O1xuICB9ICYge1xuICAgICdDb250ZW50LVR5cGUnOiBDb250ZW50VHlwZTtcbiAgfSAmIFJlY29yZDxzdHJpbmcsIGFueT5cbj47XG50eXBlIEhUVFBfTUVUSE9EID0gJ1BPU1QnIHwgJ0dFVCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTXlIdHRwUmVxdWVzdE9wdGlvbnMge1xuICB1cmw6IHN0cmluZztcbiAgbWV0aG9kOiBIVFRQX01FVEhPRDtcbiAgYm9keT86IHN0cmluZyB8IEZvcm1EYXRhO1xuICBoZWFkZXJzPzogUmF3UmVxdWVzdEhlYWRlcnM7XG59XG5cbmNvbnN0IGJvZHlJc1JlcXVpcmVkOiBSZWNvcmQ8SFRUUF9NRVRIT0QsIGJvb2xlYW4+ID0ge1xuICBHRVQ6IGZhbHNlLFxuICBQT1NUOiB0cnVlLFxufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3Qob3B0czogTXlIdHRwUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHVua25vd24+IHtcbiAgaWYgKGJvZHlJc1JlcXVpcmVkW29wdHMubWV0aG9kXSkgb3B0cy5ib2R5ID0gb3B0cy5ib2R5IHx8ICd7fSc7XG5cbiAgY29uc3QgcmVxT3B0aW9uczogUmVxdWVzdE9wdGlvbnMgPSB7XG4gICAgbWV0aG9kOiBvcHRzLm1ldGhvZCxcbiAgICBoZWFkZXJzOlxuICAgICAgb3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGFcbiAgICAgICAgPyBvcHRzLmJvZHkuZ2V0SGVhZGVycz8uKCkgPz8geyAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnIH1cbiAgICAgICAgOiBvcHRzLmhlYWRlcnNcbiAgICAgICAgPyBvcHRzLmhlYWRlcnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgIH0sXG4gIH07XG5cbiAgY29uc3QgZnVuYyA9IG9wdHMudXJsLmluY2x1ZGVzKCdodHRwczovLycsIDApID8gaHR0cHMucmVxdWVzdCA6IGh0dHAucmVxdWVzdDtcbiAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCByZXEgPSBmdW5jKG9wdHMudXJsLCByZXFPcHRpb25zLCAocmVzKSA9PiB7XG4gICAgICBsZXQgZGF0YSA9ICcnO1xuICAgICAgcmVzXG4gICAgICAgIC5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgICAgICAgIGRhdGEgPSBkYXRhICsgY2h1bmsudG9TdHJpbmcoKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShKU09OLnBhcnNlKGRhdGEpKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIsICdlcnJvciB3aGlsZSByZXMnKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpZiAob3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgIG9wdHMuYm9keS5waXBlKHJlcSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcS53cml0ZShvcHRzLmJvZHkpO1xuICAgIH1cblxuICAgIHJlcVxuICAgICAgLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyLCAnZXJyb3Igd2hpbGUgcmVxJyk7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSlcbiAgICAgIC5lbmQoKTtcbiAgfSk7XG59XG4iXX0=