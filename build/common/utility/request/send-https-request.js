import https from 'https';
import http from 'http';
import FormData from 'form-data';
const bodyIsRequired = {
    GET: false,
    POST: true,
};
export async function request(opts) {
    if (bodyIsRequired[opts.method])
        opts.body = opts.body || '{}';
    const reqOptions = {
        method: opts.method,
        headers: opts.body instanceof FormData
            ? opts.body.getHeaders()
            : opts.headers
                ? opts.headers
                : {
                    'Content-Type': 'application/json',
                },
    };
    const func = opts.url.includes('https://', 0) ? https.request : http.request;
    return await new Promise((resolve, reject) => {
        const req = func(opts.url, reqOptions, (res) => {
            let data = '';
            res
                .on('data', (chunk) => {
                data = data + chunk.toString();
            })
                .on('end', () => {
                resolve(JSON.parse(data));
            })
                .on('error', (err) => {
                console.log(err, 'error while res');
                reject(err);
            });
        });
        if (opts.body instanceof FormData) {
            opts.body.pipe(req);
        }
        else {
            req.write(opts.body);
        }
        req
            .on('error', (err) => {
            console.log(err, 'error while req');
            reject(err);
        })
            .end();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC1odHRwcy1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1vbi91dGlsaXR5L3JlcXVlc3Qvc2VuZC1odHRwcy1yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBeUIsTUFBTSxPQUFPLENBQUM7QUFDOUMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sUUFBUSxNQUFNLFdBQVcsQ0FBQztBQTRCakMsTUFBTSxjQUFjLEdBQWlDO0lBQ25ELEdBQUcsRUFBRSxLQUFLO0lBQ1YsSUFBSSxFQUFFLElBQUk7Q0FDWCxDQUFDO0FBRUYsTUFBTSxDQUFDLEtBQUssVUFBVSxPQUFPLENBQUMsSUFBMEI7SUFDdEQsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7SUFFL0QsTUFBTSxVQUFVLEdBQW1CO1FBQ2pDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtRQUNuQixPQUFPLEVBQ0wsSUFBSSxDQUFDLElBQUksWUFBWSxRQUFRO1lBQzNCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUN4QixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU87Z0JBQ2QsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPO2dCQUNkLENBQUMsQ0FBQztvQkFDRSxjQUFjLEVBQUUsa0JBQWtCO2lCQUNuQztLQUNSLENBQUM7SUFFRixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDN0UsT0FBTyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzNDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQzdDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUc7aUJBQ0EsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNwQixJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNqQyxDQUFDLENBQUM7aUJBQ0QsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM1QixDQUFDLENBQUM7aUJBQ0QsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2dCQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDZCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLENBQUMsSUFBSSxZQUFZLFFBQVEsRUFBRSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLENBQUM7YUFBTSxDQUFDO1lBQ04sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkIsQ0FBQztRQUVELEdBQUc7YUFDQSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZCxDQUFDLENBQUM7YUFDRCxHQUFHLEVBQUUsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwcywgeyBSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ2h0dHBzJztcclxuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XHJcbmltcG9ydCBGb3JtRGF0YSBmcm9tICdmb3JtLWRhdGEnO1xyXG5cclxudHlwZSBCYXNlUmVxdWVzdEhlYWRlcnNMaXN0ID0gJ0FjY2VwdCcgfCAnQ29udGVudC1MZW5ndGgnIHwgJ1VzZXItQWdlbnQnIHwgJ0NvbnRlbnQtRW5jb2RpbmcnIHwgJ0F1dGhvcml6YXRpb24nO1xyXG5cclxudHlwZSBDb250ZW50VHlwZSA9XHJcbiAgfCAndGV4dC9odG1sJ1xyXG4gIHwgJ3RleHQvcGxhaW4nXHJcbiAgfCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcclxuICB8ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gIHwgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcclxuICB8ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nO1xyXG5cclxuZXhwb3J0IHR5cGUgUmF3UmVxdWVzdEhlYWRlcnMgPSBQYXJ0aWFsPFxyXG4gIHtcclxuICAgIFtLZXkgaW4gQmFzZVJlcXVlc3RIZWFkZXJzTGlzdF06IGFueTtcclxuICB9ICYge1xyXG4gICAgJ0NvbnRlbnQtVHlwZSc6IENvbnRlbnRUeXBlO1xyXG4gIH0gJiBSZWNvcmQ8c3RyaW5nLCBhbnk+XHJcbj47XHJcbnR5cGUgSFRUUF9NRVRIT0QgPSAnUE9TVCcgfCAnR0VUJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTXlIdHRwUmVxdWVzdE9wdGlvbnMge1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIG1ldGhvZDogSFRUUF9NRVRIT0Q7XHJcbiAgYm9keT86IHN0cmluZyB8IEZvcm1EYXRhO1xyXG4gIGhlYWRlcnM/OiBSYXdSZXF1ZXN0SGVhZGVycztcclxufVxyXG5cclxuY29uc3QgYm9keUlzUmVxdWlyZWQ6IFJlY29yZDxIVFRQX01FVEhPRCwgYm9vbGVhbj4gPSB7XHJcbiAgR0VUOiBmYWxzZSxcclxuICBQT1NUOiB0cnVlLFxyXG59O1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3Qob3B0czogTXlIdHRwUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHVua25vd24+IHtcclxuICBpZiAoYm9keUlzUmVxdWlyZWRbb3B0cy5tZXRob2RdKSBvcHRzLmJvZHkgPSBvcHRzLmJvZHkgfHwgJ3t9JztcclxuXHJcbiAgY29uc3QgcmVxT3B0aW9uczogUmVxdWVzdE9wdGlvbnMgPSB7XHJcbiAgICBtZXRob2Q6IG9wdHMubWV0aG9kLFxyXG4gICAgaGVhZGVyczpcclxuICAgICAgb3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGFcclxuICAgICAgICA/IG9wdHMuYm9keS5nZXRIZWFkZXJzKClcclxuICAgICAgICA6IG9wdHMuaGVhZGVyc1xyXG4gICAgICAgID8gb3B0cy5oZWFkZXJzXHJcbiAgICAgICAgOiB7XHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICB9LFxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGZ1bmMgPSBvcHRzLnVybC5pbmNsdWRlcygnaHR0cHM6Ly8nLCAwKSA/IGh0dHBzLnJlcXVlc3QgOiBodHRwLnJlcXVlc3Q7XHJcbiAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IHJlcSA9IGZ1bmMob3B0cy51cmwsIHJlcU9wdGlvbnMsIChyZXMpID0+IHtcclxuICAgICAgbGV0IGRhdGEgPSAnJztcclxuICAgICAgcmVzXHJcbiAgICAgICAgLm9uKCdkYXRhJywgKGNodW5rKSA9PiB7XHJcbiAgICAgICAgICBkYXRhID0gZGF0YSArIGNodW5rLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oJ2VuZCcsICgpID0+IHtcclxuICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShkYXRhKSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oJ2Vycm9yJywgKGVycikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZXJyLCAnZXJyb3Igd2hpbGUgcmVzJyk7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChvcHRzLmJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xyXG4gICAgICBvcHRzLmJvZHkucGlwZShyZXEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVxLndyaXRlKG9wdHMuYm9keSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVxXHJcbiAgICAgIC5vbignZXJyb3InLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyLCAnZXJyb3Igd2hpbGUgcmVxJyk7XHJcbiAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5lbmQoKTtcclxuICB9KTtcclxufVxyXG4iXX0=