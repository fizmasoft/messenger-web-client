import { __awaiter } from "tslib";
import FormData from 'form-data';
import http from 'http';
import https from 'https';
const bodyIsRequired = {
    GET: false,
    POST: true,
};
export function request(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        if (bodyIsRequired[opts.method])
            opts.body = opts.body || '{}';
        const reqOptions = {
            method: opts.method,
            headers: opts.body instanceof FormData
                ? (_c = (_b = (_a = opts.body).getHeaders) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : { 'Content-Type': 'multipart/form-data' }
                : opts.headers
                    ? opts.headers
                    : {
                        'Content-Type': 'application/json',
                    },
        };
        const func = opts.url.includes('https://', 0) ? https.request : http.request;
        return yield new Promise((resolve, reject) => {
            const req = func(opts.url, reqOptions, (res) => {
                let data = '';
                res
                    .on('data', (chunk) => {
                    data = data + chunk.toString();
                })
                    .on('end', () => {
                    resolve(JSON.parse(data));
                })
                    .on('error', (err) => {
                    console.log(err, 'error while res');
                    reject(err);
                });
            });
            if (opts.body instanceof FormData) {
                opts.body.pipe(req);
            }
            else {
                req.write(opts.body);
            }
            req
                .on('error', (err) => {
                console.log(err, 'error while req');
                reject(err);
            })
                .end();
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC1odHRwcy1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1vbi91dGlsaXR5L3JlcXVlc3Qvc2VuZC1odHRwcy1yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLFFBQVEsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sS0FBeUIsTUFBTSxPQUFPLENBQUM7QUFpQzlDLE1BQU0sY0FBYyxHQUFpQztJQUNuRCxHQUFHLEVBQUUsS0FBSztJQUNWLElBQUksRUFBRSxJQUFJO0NBQ1gsQ0FBQztBQUVGLE1BQU0sVUFBZ0IsT0FBTyxDQUFDLElBQTBCOzs7UUFDdEQsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7UUFFL0QsTUFBTSxVQUFVLEdBQW1CO1lBQ2pDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixPQUFPLEVBQ0wsSUFBSSxDQUFDLElBQUksWUFBWSxRQUFRO2dCQUMzQixDQUFDLENBQUMsTUFBQSxNQUFBLE1BQUEsSUFBSSxDQUFDLElBQUksRUFBQyxVQUFVLGtEQUFJLG1DQUFJLEVBQUUsY0FBYyxFQUFFLHFCQUFxQixFQUFFO2dCQUN2RSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU87b0JBQ2QsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPO29CQUNkLENBQUMsQ0FBQzt3QkFDRSxjQUFjLEVBQUUsa0JBQWtCO3FCQUNuQztTQUNSLENBQUM7UUFFRixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDN0UsT0FBTyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzNDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUM3QyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7Z0JBQ2QsR0FBRztxQkFDQSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQ3BCLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNqQyxDQUFDLENBQUM7cUJBQ0QsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7b0JBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDO3FCQUNELEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtvQkFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztvQkFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLElBQUksQ0FBQyxJQUFJLFlBQVksUUFBUSxFQUFFLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLENBQUM7aUJBQU0sQ0FBQztnQkFDTixHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QixDQUFDO1lBRUQsR0FBRztpQkFDQSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUM7Z0JBQ3BDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNkLENBQUMsQ0FBQztpQkFDRCxHQUFHLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZvcm1EYXRhIGZyb20gJ2Zvcm0tZGF0YSc7XHJcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xyXG5pbXBvcnQgaHR0cHMsIHsgUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdodHRwcyc7XHJcblxyXG50eXBlIEJhc2VSZXF1ZXN0SGVhZGVyc0xpc3QgPVxyXG4gIHwgJ0FjY2VwdCdcclxuICB8ICdDb250ZW50LUxlbmd0aCdcclxuICB8ICdVc2VyLUFnZW50J1xyXG4gIHwgJ0NvbnRlbnQtRW5jb2RpbmcnXHJcbiAgfCAnQXV0aG9yaXphdGlvbic7XHJcblxyXG50eXBlIENvbnRlbnRUeXBlID1cclxuICB8ICd0ZXh0L2h0bWwnXHJcbiAgfCAndGV4dC9wbGFpbidcclxuICB8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xyXG4gIHwgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgfCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xyXG4gIHwgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XHJcblxyXG5leHBvcnQgdHlwZSBSYXdSZXF1ZXN0SGVhZGVycyA9IFBhcnRpYWw8XHJcbiAge1xyXG4gICAgW0tleSBpbiBCYXNlUmVxdWVzdEhlYWRlcnNMaXN0XTogYW55O1xyXG4gIH0gJiB7XHJcbiAgICAnQ29udGVudC1UeXBlJzogQ29udGVudFR5cGU7XHJcbiAgfSAmIFJlY29yZDxzdHJpbmcsIGFueT5cclxuPjtcclxudHlwZSBIVFRQX01FVEhPRCA9ICdQT1NUJyB8ICdHRVQnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNeUh0dHBSZXF1ZXN0T3B0aW9ucyB7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbiAgbWV0aG9kOiBIVFRQX01FVEhPRDtcclxuICBib2R5Pzogc3RyaW5nIHwgRm9ybURhdGE7XHJcbiAgaGVhZGVycz86IFJhd1JlcXVlc3RIZWFkZXJzO1xyXG59XHJcblxyXG5jb25zdCBib2R5SXNSZXF1aXJlZDogUmVjb3JkPEhUVFBfTUVUSE9ELCBib29sZWFuPiA9IHtcclxuICBHRVQ6IGZhbHNlLFxyXG4gIFBPU1Q6IHRydWUsXHJcbn07XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVxdWVzdChvcHRzOiBNeUh0dHBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dW5rbm93bj4ge1xyXG4gIGlmIChib2R5SXNSZXF1aXJlZFtvcHRzLm1ldGhvZF0pIG9wdHMuYm9keSA9IG9wdHMuYm9keSB8fCAne30nO1xyXG5cclxuICBjb25zdCByZXFPcHRpb25zOiBSZXF1ZXN0T3B0aW9ucyA9IHtcclxuICAgIG1ldGhvZDogb3B0cy5tZXRob2QsXHJcbiAgICBoZWFkZXJzOlxyXG4gICAgICBvcHRzLmJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YVxyXG4gICAgICAgID8gb3B0cy5ib2R5LmdldEhlYWRlcnM/LigpID8/IHsgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJyB9XHJcbiAgICAgICAgOiBvcHRzLmhlYWRlcnNcclxuICAgICAgICA/IG9wdHMuaGVhZGVyc1xyXG4gICAgICAgIDoge1xyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgfSxcclxuICB9O1xyXG5cclxuICBjb25zdCBmdW5jID0gb3B0cy51cmwuaW5jbHVkZXMoJ2h0dHBzOi8vJywgMCkgPyBodHRwcy5yZXF1ZXN0IDogaHR0cC5yZXF1ZXN0O1xyXG4gIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjb25zdCByZXEgPSBmdW5jKG9wdHMudXJsLCByZXFPcHRpb25zLCAocmVzKSA9PiB7XHJcbiAgICAgIGxldCBkYXRhID0gJyc7XHJcbiAgICAgIHJlc1xyXG4gICAgICAgIC5vbignZGF0YScsIChjaHVuaykgPT4ge1xyXG4gICAgICAgICAgZGF0YSA9IGRhdGEgKyBjaHVuay50b1N0cmluZygpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKCdlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UoZGF0YSkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKCdlcnJvcicsIChlcnIpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGVyciwgJ2Vycm9yIHdoaWxlIHJlcycpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAob3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcclxuICAgICAgb3B0cy5ib2R5LnBpcGUocmVxKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlcS53cml0ZShvcHRzLmJvZHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcVxyXG4gICAgICAub24oJ2Vycm9yJywgKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVyciwgJ2Vycm9yIHdoaWxlIHJlcScpO1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9KVxyXG4gICAgICAuZW5kKCk7XHJcbiAgfSk7XHJcbn1cclxuIl19