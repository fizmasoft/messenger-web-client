import { BaseException } from '../errors/common.error';
import { StatusCodes } from './status-codes';
import { CODES } from '../constant';
export const addMethodToResponse = (request, response, next) => {
    response.success = function (data, meta = null, { code = CODES.BASE, httpCode = StatusCodes.OK, } = {}) {
        // if (data && Array.isArray(data.data) && data.total >= 0) {
        //   data = data.data;
        //   meta.total = data.total;
        // }
        // const success = BaseException.Success(data, meta);
        const json = BaseException.Success(data, meta, code);
        return response.status(httpCode).json({
            ...json,
            message: request.t(json.message.text, json.message.replace),
        });
    };
    next();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXJlc3BvbnNlLW1ldGhvZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vdXRpbGl0eS9hZGQtcmVzcG9uc2UtbWV0aG9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVwQyxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLE9BQWdCLEVBQUUsUUFBa0IsRUFBRSxJQUFrQixFQUFFLEVBQUU7SUFDOUYsUUFBUSxDQUFDLE9BQU8sR0FBRyxVQUNqQixJQUFJLEVBQ0osT0FBaUIsSUFBSSxFQUNyQixFQUNFLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxFQUNqQixRQUFRLEdBQUcsV0FBVyxDQUFDLEVBQUUsTUFDb0IsRUFBRTtRQUVqRCw2REFBNkQ7UUFDN0Qsc0JBQXNCO1FBQ3RCLDZCQUE2QjtRQUM3QixJQUFJO1FBQ0oscURBQXFEO1FBQ3JELE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVyRCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3BDLEdBQUcsSUFBSTtZQUNQLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1NBQzVELENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLElBQUksRUFBRSxDQUFDO0FBQ1QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dEZ1bmN0aW9uLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgeyBCYXNlRXhjZXB0aW9uIH0gZnJvbSAnLi4vZXJyb3JzL2NvbW1vbi5lcnJvcic7XHJcbmltcG9ydCB7IFN0YXR1c0NvZGVzIH0gZnJvbSAnLi9zdGF0dXMtY29kZXMnO1xyXG5pbXBvcnQgeyBDT0RFUyB9IGZyb20gJy4uL2NvbnN0YW50JztcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRNZXRob2RUb1Jlc3BvbnNlID0gKHJlcXVlc3Q6IFJlcXVlc3QsIHJlc3BvbnNlOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcbiAgcmVzcG9uc2Uuc3VjY2VzcyA9IGZ1bmN0aW9uIChcclxuICAgIGRhdGEsXHJcbiAgICBtZXRhOiBNZXRhRGF0YSA9IG51bGwsXHJcbiAgICB7XHJcbiAgICAgIGNvZGUgPSBDT0RFUy5CQVNFLFxyXG4gICAgICBodHRwQ29kZSA9IFN0YXR1c0NvZGVzLk9LLFxyXG4gICAgfTogeyBodHRwQ29kZT86IFN0YXR1c0NvZGVzOyBjb2RlPzogbnVtYmVyIH0gPSB7fSxcclxuICApIHtcclxuICAgIC8vIGlmIChkYXRhICYmIEFycmF5LmlzQXJyYXkoZGF0YS5kYXRhKSAmJiBkYXRhLnRvdGFsID49IDApIHtcclxuICAgIC8vICAgZGF0YSA9IGRhdGEuZGF0YTtcclxuICAgIC8vICAgbWV0YS50b3RhbCA9IGRhdGEudG90YWw7XHJcbiAgICAvLyB9XHJcbiAgICAvLyBjb25zdCBzdWNjZXNzID0gQmFzZUV4Y2VwdGlvbi5TdWNjZXNzKGRhdGEsIG1ldGEpO1xyXG4gICAgY29uc3QganNvbiA9IEJhc2VFeGNlcHRpb24uU3VjY2VzcyhkYXRhLCBtZXRhLCBjb2RlKTtcclxuXHJcbiAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKGh0dHBDb2RlKS5qc29uKHtcclxuICAgICAgLi4uanNvbixcclxuICAgICAgbWVzc2FnZTogcmVxdWVzdC50KGpzb24ubWVzc2FnZS50ZXh0LCBqc29uLm1lc3NhZ2UucmVwbGFjZSksXHJcbiAgICB9KTtcclxuICB9O1xyXG4gIG5leHQoKTtcclxufTtcclxuXHJcbmRlY2xhcmUgbW9kdWxlICdleHByZXNzJyB7XHJcbiAgZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZSB7XHJcbiAgICBzdWNjZXNzOiAoXHJcbiAgICAgIGRhdGE6IGFueSxcclxuICAgICAgbWV0YT86IE1ldGFEYXRhLFxyXG4gICAgICBvcHRpb25zPzogeyBodHRwQ29kZT86IFN0YXR1c0NvZGVzOyBjb2RlPzogbnVtYmVyIH0sXHJcbiAgICApID0+IHZvaWQ7XHJcbiAgfVxyXG5cclxuICBleHBvcnQgaW50ZXJmYWNlIFJlcXVlc3Qge1xyXG4gICAgcmF0ZUxpbWl0OiB7XHJcbiAgICAgIGxpbWl0OiBudW1iZXI7XHJcbiAgICAgIHVzZWQ6IG51bWJlcjtcclxuICAgICAgcmVtYWluaW5nOiBudW1iZXI7XHJcbiAgICAgIHJlc2V0VGltZTogRGF0ZTtcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==