import { CODES } from '../constant/response.codes';
export class BaseException {
    code;
    message;
    data;
    meta;
    success;
    time;
    constructor(code = CODES.BASE, message, data, meta = {}, success = false, time = new Date().toISOString()) {
        this.code = code;
        this.message = message;
        this.data = data;
        this.meta = meta;
        this.success = success;
        this.time = time;
    }
    static Success(data, meta, code = CODES.BASE) {
        return new BaseException(code, { text: 'system.success' }, data, meta, true);
    }
    static UnknownError(data, meta = {}, code = CODES.BASE) {
        return new BaseException(code + 1, { text: 'errors.unknownError' }, data, meta);
    }
    static ValidationError(data, code = CODES.BASE) {
        if (data instanceof Array) {
            for (const d of data) {
                d.target = undefined;
                d.messages = Object.values(d.constraints);
            }
        }
        return new BaseException(code + 2, { text: 'validationError.validationError' }, data);
    }
    static AllreadyExist(data, message, code = CODES.BASE) {
        return new BaseException(code + 3, { text: `errors.alreadyExist`, replace: { data: message } }, data);
    }
    static NotFound(data, code = CODES.BASE) {
        return new BaseException(code + 4, { text: 'errors.notFound', replace: { data } }, null);
    }
    static InternalServerError(code = CODES.BASE) {
        return new BaseException(code + 5, { text: 'errors.internalServerError' }, null);
    }
    static InvalidLoginOrPassword(code = CODES.AUTH) {
        return new BaseException(code + 6, { text: 'authAndPermission.invalidLoginOrPassword' }, null);
    }
    static Unauthorized(data = null, code = CODES.AUTH) {
        return new BaseException(code + 7, { text: 'authAndPermission.unauthorized' }, data);
    }
    static NotEnoughPermission(data = null, code = CODES.AUTH) {
        return new BaseException(code + 8, { text: 'authAndPermission.notEnoughPermission' }, data);
    }
    static CannotDeleteAdmin(data = null, code = CODES.AUTH) {
        return new BaseException(code + 9, { text: 'authAndPermission.cannotDeleteAdmin' }, data);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmVycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9lcnJvcnMvY29tbW9uLmVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUduRCxNQUFNLE9BQU8sYUFBYTtJQUVOO0lBQ1Q7SUFDUztJQUNBO0lBQ0E7SUFDQTtJQU5sQixZQUNrQixPQUFlLEtBQUssQ0FBQyxJQUFJLEVBQ2xDLE9BQTJELEVBQ2xELElBQWEsRUFDYixPQUFnQixFQUFFLEVBQ2xCLFVBQW1CLEtBQUssRUFDeEIsT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtRQUwvQixTQUFJLEdBQUosSUFBSSxDQUFxQjtRQUNsQyxZQUFPLEdBQVAsT0FBTyxDQUFvRDtRQUNsRCxTQUFJLEdBQUosSUFBSSxDQUFTO1FBQ2IsU0FBSSxHQUFKLElBQUksQ0FBYztRQUNsQixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUN4QixTQUFJLEdBQUosSUFBSSxDQUEyQjtJQUM5QyxDQUFDO0lBRUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFhLEVBQUUsSUFBYSxFQUFFLE9BQWUsS0FBSyxDQUFDLElBQUk7UUFDM0UsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFTSxNQUFNLENBQUMsWUFBWSxDQUFDLElBQWMsRUFBRSxPQUFnQixFQUFFLEVBQUUsT0FBZSxLQUFLLENBQUMsSUFBSTtRQUN0RixPQUFPLElBQUksYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVNLE1BQU0sQ0FBQyxlQUFlLENBQzNCLElBQXVFLEVBQ3ZFLE9BQWUsS0FBSyxDQUFDLElBQUk7UUFFekIsSUFBSSxJQUFJLFlBQVksS0FBSyxFQUFFLENBQUM7WUFDMUIsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztnQkFDckIsQ0FBQyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7Z0JBQ3JCLENBQUMsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDNUMsQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLElBQUksYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsaUNBQWlDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4RixDQUFDO0lBRUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQWUsS0FBSyxDQUFDLElBQUk7UUFDM0QsT0FBTyxJQUFJLGFBQWEsQ0FDdEIsSUFBSSxHQUFHLENBQUMsRUFDUixFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFDM0QsSUFBSSxDQUNMLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFZLEVBQUUsT0FBZSxLQUFLLENBQUMsSUFBSTtRQUNyRCxPQUFPLElBQUksYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBRUQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQWUsS0FBSyxDQUFDLElBQUk7UUFDbEQsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLDRCQUE0QixFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUk7UUFDcEQsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLDBDQUEwQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVNLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLElBQUksRUFBRSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUk7UUFDdkQsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLGdDQUFnQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUVNLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSTtRQUM5RCxPQUFPLElBQUksYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsdUNBQXVDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRU0sTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQUksR0FBRyxJQUFJLEVBQUUsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJO1FBQzVELE9BQU8sSUFBSSxhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxxQ0FBcUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVGLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRpb25FcnJvciB9IGZyb20gJ2NsYXNzLXZhbGlkYXRvcic7XHJcbmltcG9ydCB7IENPREVTIH0gZnJvbSAnLi4vY29uc3RhbnQvcmVzcG9uc2UuY29kZXMnO1xyXG5pbXBvcnQgeyBSZXBsYWNlbWVudHMgfSBmcm9tICdpMThuJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXNlRXhjZXB0aW9uIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyByZWFkb25seSBjb2RlOiBudW1iZXIgPSBDT0RFUy5CQVNFLFxyXG4gICAgcHVibGljIG1lc3NhZ2U6IHsgdGV4dDogSTE4blR5cGUuSTE4bktleTsgcmVwbGFjZT86IFJlcGxhY2VtZW50cyB9LFxyXG4gICAgcHVibGljIHJlYWRvbmx5IGRhdGE6IHVua25vd24sXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWV0YTogdW5rbm93biA9IHt9LFxyXG4gICAgcHVibGljIHJlYWRvbmx5IHN1Y2Nlc3M6IGJvb2xlYW4gPSBmYWxzZSxcclxuICAgIHB1YmxpYyByZWFkb25seSB0aW1lID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICkge31cclxuXHJcbiAgcHVibGljIHN0YXRpYyBTdWNjZXNzKGRhdGE6IHVua25vd24sIG1ldGE6IHVua25vd24sIGNvZGU6IG51bWJlciA9IENPREVTLkJBU0UpIHtcclxuICAgIHJldHVybiBuZXcgQmFzZUV4Y2VwdGlvbihjb2RlLCB7IHRleHQ6ICdzeXN0ZW0uc3VjY2VzcycgfSwgZGF0YSwgbWV0YSwgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIFVua25vd25FcnJvcihkYXRhPzogdW5rbm93biwgbWV0YTogdW5rbm93biA9IHt9LCBjb2RlOiBudW1iZXIgPSBDT0RFUy5CQVNFKSB7XHJcbiAgICByZXR1cm4gbmV3IEJhc2VFeGNlcHRpb24oY29kZSArIDEsIHsgdGV4dDogJ2Vycm9ycy51bmtub3duRXJyb3InIH0sIGRhdGEsIG1ldGEpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBWYWxpZGF0aW9uRXJyb3IoXHJcbiAgICBkYXRhPzogKFZhbGlkYXRpb25FcnJvciAmIHsgbWVzc2FnZXM/OiBzdHJpbmdbXSB9KVtdIHwgSTE4blR5cGUuSTE4bktleSxcclxuICAgIGNvZGU6IG51bWJlciA9IENPREVTLkJBU0UsXHJcbiAgKSB7XHJcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgIGZvciAoY29uc3QgZCBvZiBkYXRhKSB7XHJcbiAgICAgICAgZC50YXJnZXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgZC5tZXNzYWdlcyA9IE9iamVjdC52YWx1ZXMoZC5jb25zdHJhaW50cyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IEJhc2VFeGNlcHRpb24oY29kZSArIDIsIHsgdGV4dDogJ3ZhbGlkYXRpb25FcnJvci52YWxpZGF0aW9uRXJyb3InIH0sIGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIEFsbHJlYWR5RXhpc3QoZGF0YSwgbWVzc2FnZSwgY29kZTogbnVtYmVyID0gQ09ERVMuQkFTRSkge1xyXG4gICAgcmV0dXJuIG5ldyBCYXNlRXhjZXB0aW9uKFxyXG4gICAgICBjb2RlICsgMyxcclxuICAgICAgeyB0ZXh0OiBgZXJyb3JzLmFscmVhZHlFeGlzdGAsIHJlcGxhY2U6IHsgZGF0YTogbWVzc2FnZSB9IH0sXHJcbiAgICAgIGRhdGEsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIE5vdEZvdW5kKGRhdGE6IHN0cmluZywgY29kZTogbnVtYmVyID0gQ09ERVMuQkFTRSkge1xyXG4gICAgcmV0dXJuIG5ldyBCYXNlRXhjZXB0aW9uKGNvZGUgKyA0LCB7IHRleHQ6ICdlcnJvcnMubm90Rm91bmQnLCByZXBsYWNlOiB7IGRhdGEgfSB9LCBudWxsKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBJbnRlcm5hbFNlcnZlckVycm9yKGNvZGU6IG51bWJlciA9IENPREVTLkJBU0UpIHtcclxuICAgIHJldHVybiBuZXcgQmFzZUV4Y2VwdGlvbihjb2RlICsgNSwgeyB0ZXh0OiAnZXJyb3JzLmludGVybmFsU2VydmVyRXJyb3InIH0sIG51bGwpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBJbnZhbGlkTG9naW5PclBhc3N3b3JkKGNvZGUgPSBDT0RFUy5BVVRIKSB7XHJcbiAgICByZXR1cm4gbmV3IEJhc2VFeGNlcHRpb24oY29kZSArIDYsIHsgdGV4dDogJ2F1dGhBbmRQZXJtaXNzaW9uLmludmFsaWRMb2dpbk9yUGFzc3dvcmQnIH0sIG51bGwpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBVbmF1dGhvcml6ZWQoZGF0YSA9IG51bGwsIGNvZGUgPSBDT0RFUy5BVVRIKSB7XHJcbiAgICByZXR1cm4gbmV3IEJhc2VFeGNlcHRpb24oY29kZSArIDcsIHsgdGV4dDogJ2F1dGhBbmRQZXJtaXNzaW9uLnVuYXV0aG9yaXplZCcgfSwgZGF0YSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIE5vdEVub3VnaFBlcm1pc3Npb24oZGF0YSA9IG51bGwsIGNvZGUgPSBDT0RFUy5BVVRIKSB7XHJcbiAgICByZXR1cm4gbmV3IEJhc2VFeGNlcHRpb24oY29kZSArIDgsIHsgdGV4dDogJ2F1dGhBbmRQZXJtaXNzaW9uLm5vdEVub3VnaFBlcm1pc3Npb24nIH0sIGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBDYW5ub3REZWxldGVBZG1pbihkYXRhID0gbnVsbCwgY29kZSA9IENPREVTLkFVVEgpIHtcclxuICAgIHJldHVybiBuZXcgQmFzZUV4Y2VwdGlvbihjb2RlICsgOSwgeyB0ZXh0OiAnYXV0aEFuZFBlcm1pc3Npb24uY2Fubm90RGVsZXRlQWRtaW4nIH0sIGRhdGEpO1xyXG4gIH1cclxufVxyXG4iXX0=