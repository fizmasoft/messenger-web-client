import { green, red } from 'ansis';
import { io } from 'socket.io-client';
import { v1 as uuidV1 } from 'uuid';
import { ENV } from './common/config';
import { DeviceTypesEnum } from './types';
import { localStg, CustomAxiosInstance } from './utils';
const localUid = localStg.get('uid');
const uid = localUid ? localUid : uuidV1();
localStg.set('uid', uid);
let appVersion = '0.0.0';
const requiredHeaders = {
    'x-device-type': DeviceTypesEnum.WEB,
    'x-device-model': ENV.isBrowser
        ? `${navigator.userAgent} | ${navigator.platform}`
        : ENV.isNode
            ? `${process.platform} | ${process.arch} | Nodejs: ${process.version}`
            : 'Unknown', // dynamically fetching device model info
    // 'x-app-lang': (languageGetter() || 'Uz-Latin') as I18nType.LangType, // dynamically fetching language info
    'x-app-version': appVersion,
    'x-app-uid': uid,
};
class Messenger {
    #pollingInterval;
    #polling;
    #axiosInstance;
    #events;
    #updatesHash = '';
    #token;
    uid;
    socket;
    constructor({ baseURL, token, polling = null, languageGetter = () => 'Uz-Latin', headers = {}, }, options = {}) {
        this.uid = uid;
        this.#polling = polling;
        this.#events = {};
        this.#axiosInstance = new CustomAxiosInstance({ baseURL: baseURL, headers: requiredHeaders }, {
            refreshTokenUrl: '/v1/auth/refresh-token',
            languageGetter,
        }).instance;
        if (polling === null) {
            this.socket = io(baseURL, {
                path: '/messenger',
                auth: {
                    ...requiredHeaders,
                    ...headers,
                    token: this.#token,
                },
                extraHeaders: { ...requiredHeaders, ...headers },
                ...options,
            });
        }
        this.init = this.init.bind(this);
        this.close = this.close.bind(this);
        this.initPolling = this.initPolling.bind(this);
        this.on = this.on.bind(this);
        this.searchUser = this.searchUser.bind(this);
        this.getChatMessages = this.getChatMessages.bind(this);
        this.getChatInfo = this.getChatInfo.bind(this);
        this.getChatMedia = this.getChatMedia.bind(this);
        this.getChatFiles = this.getChatFiles.bind(this);
        this.getChatAudios = this.getChatAudios.bind(this);
        this.getUpdates = this.getUpdates.bind(this);
        this.updateMessages = this.updateMessages.bind(this);
        this.getChats = this.getChats.bind(this);
        this.init(token);
    }
    close() {
        if (this.socket) {
            this.socket.close();
            return;
        }
        clearInterval(this.#pollingInterval);
        this.#pollingInterval = undefined;
    }
    initPolling() {
        if (this.#pollingInterval) {
            clearInterval(this.#pollingInterval);
        }
        const getUpdates = this.getUpdates;
        const polling = this.#polling;
        const events = this.#events;
        async function intervalCallback() {
            const { updates, meta } = await getUpdates({ limit: polling.limit });
            if (events['update']) {
                updates.map((update) => {
                    events['update'].map((cb) => cb(update));
                });
            }
        }
        this.#pollingInterval = setInterval(intervalCallback, polling.interval);
    }
    async init(token) {
        if (typeof token === 'function') {
            this.#token = await token();
        }
        else {
            this.#token = token;
        }
        localStg.set('token', this.#token);
        if (this.#polling) {
            this.initPolling();
            return this;
        }
        return this.socket
            .connect()
            .on('connect', () => {
            console.log(green(`Socket successfully connected. socket.id: ${this.socket.id}`));
        })
            .on('disconnect', (reason, details) => {
            console.log(red(`Socket disconnected: id: ${this.socket.id}, reason: ${reason}, details: ${JSON.stringify(details)}`));
        })
            .on('connect_error', (err) => {
            if (this.socket.active) {
                console.log(red('temporary failure, the socket will automatically try to reconnect'));
            }
            else {
                // the connection was denied by the server
                // in that case, `socket.connect()` must be manually called in order to reconnect
                console.log(red(`
                the connection was denied by the server
                in that case, socket.connect() must be manually called in order to reconnect.
                Error: ${err.message}
              `));
            }
        });
    }
    on(event, cb) {
        if (this.#events[event]) {
            this.#events[event].push(cb);
        }
        else {
            this.#events[event] = [cb];
        }
        // let a: Record<keyof IEvents, (...args: any) => void>;
        if (this.socket) {
            this.socket.on(event, cb);
        }
        return this;
    }
    /**
     *
     * @param search id or username
     * @returns {[]}
     */
    async searchUser(search) {
        const data = await this.#axiosInstance.get(`/users?search=${search}`);
        return data.data;
    }
    async sendMessage(message) {
        const data = await this.#axiosInstance.post(`v1/chats/${message.to.chatId}/messages`, message);
        return data.data;
    }
    async getChatMessages(chatId, { limit = 20, page = 1, search = '' }) {
        const { data } = await this.#axiosInstance.get(`/chats/${chatId}?search=${search}&limit=${limit}&page=${page}`);
        return data;
    }
    async getChatInfo(chatId) {
        const { data } = await this.#axiosInstance.get(`/chats/${chatId}`);
        return data;
    }
    async getChatMedia(chatId, { limit = 20, page = 1 }) {
        return {};
    }
    async getChatFiles(chatId, { limit = 20, page = 1 }) {
        return [];
    }
    async getChatAudios(chatId, { limit = 20, page = 1 }) {
        return [];
    }
    async getUpdates({ limit = this.#polling.limit, page = 1, allowedUpdates = [], } = {}) {
        const { data } = await this.#axiosInstance
            .get(`/v1/users/updates?page=${page}&limit=${limit}&hash=${this.#updatesHash
        // this.#updatesHash ? this.#updatesHash : ''
        }`)
            .catch(() => ({
            data: {
                data: [],
                meta: {
                    hash: null,
                    currentPage: 1,
                    limit: 100,
                    totalCount: 0,
                    totalPages: 0,
                },
            },
        }));
        if (data.meta.hash) {
            this.#updatesHash = data.meta.hash;
        }
        else {
            this.#updatesHash = '';
        }
        return { updates: data.data, meta: data.meta };
    }
    updateMessages(messages) {
        return []; // kim qachon o'qidi...
    }
    async getChats({ limit = 100, page = 1, type = 'private', }) {
        const data = await this.#axiosInstance.get(`/chats?limit=${limit}&page=${page}${type ? `&type=${type}` : ''}`);
        return data.data;
    }
    ping() {
        if (this.socket) {
            this.socket.send('hello');
            this.socket.emit('ping', new Date().toISOString());
        }
        else {
            this.#axiosInstance.get('/check-health').catch();
        }
    }
}
let messenger;
export function getMessenger(customOptions, options = {}) {
    if (messenger) {
        return messenger;
    }
    messenger = new Messenger(customOptions, options);
    return messenger;
}
//# sourceMappingURL=data:application/json;base64,