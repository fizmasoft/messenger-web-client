import { ENV } from '../../common/config';
import { decrypt, encrypt } from '../crypto';
let localStorage;
if (ENV.isBrowser) {
    localStorage = window.localStorage;
}
else {
    const map = new Map();
    localStorage = {
        clear() {
            map.clear();
            return map;
        },
        getItem(key) {
            return map.get(key);
        },
        removeItem(key) {
            map.delete(key);
            return map;
        },
        setItem(key, value) {
            map.set(key, value);
            return map;
        },
    };
}
function createLocalStorage() {
    /** The default cache period is 7 days */
    const DEFAULT_CACHE_TIME = 60 * 60 * 24 * 7;
    function set(key, value, expire = DEFAULT_CACHE_TIME) {
        const storageData = {
            value,
            expire: expire !== null ? new Date().getTime() + expire * 1000 : null,
        };
        localStorage.setItem(key, encrypt(storageData));
    }
    function get(key) {
        const json = localStorage.getItem(key);
        if (!json) {
            return null;
        }
        let storageData = null;
        try {
            storageData = decrypt(json);
        }
        catch (_a) {
            // Prevent parsing failure
        }
        if (!storageData) {
            remove(key);
            return null;
        }
        const { value, expire } = storageData;
        // Return directly within the validity period
        if (!(expire === null || expire >= Date.now())) {
            return null;
        }
        return value;
    }
    function remove(key) {
        localStorage.removeItem(key);
    }
    function clear() {
        localStorage.clear();
    }
    return {
        set,
        get,
        remove,
        clear,
    };
}
export const localStg = createLocalStorage();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvc3RvcmFnZS9sb2NhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFMUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFPN0MsSUFBSSxZQUtILENBQUM7QUFDRixJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNsQixZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztBQUNyQyxDQUFDO0tBQU0sQ0FBQztJQUNOLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDdEIsWUFBWSxHQUFHO1FBQ2IsS0FBSztZQUNILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNaLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztRQUNELE9BQU8sQ0FBQyxHQUFHO1lBQ1QsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLENBQUM7UUFDRCxVQUFVLENBQUMsR0FBRztZQUNaLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEIsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLO1lBQ2hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3BCLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxrQkFBa0I7SUFDekIseUNBQXlDO0lBQ3pDLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRTVDLFNBQVMsR0FBRyxDQUFvQixHQUFNLEVBQUUsS0FBVyxFQUFFLFNBQXdCLGtCQUFrQjtRQUM3RixNQUFNLFdBQVcsR0FBc0I7WUFDckMsS0FBSztZQUNMLE1BQU0sRUFBRSxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUk7U0FDdEUsQ0FBQztRQUVGLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBYSxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxTQUFTLEdBQUcsQ0FBb0IsR0FBTTtRQUNwQyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQWEsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNWLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELElBQUksV0FBVyxHQUE2QixJQUFJLENBQUM7UUFDakQsSUFBSSxDQUFDO1lBQ0gsV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixDQUFDO1FBQUMsV0FBTSxDQUFDO1lBQ1AsMEJBQTBCO1FBQzVCLENBQUM7UUFDRCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDakIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1osT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxXQUFXLENBQUM7UUFDdEMsNkNBQTZDO1FBQzdDLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDL0MsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsU0FBUyxNQUFNLENBQUMsR0FBWTtRQUMxQixZQUFZLENBQUMsVUFBVSxDQUFDLEdBQWEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxTQUFTLEtBQUs7UUFDWixZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELE9BQU87UUFDTCxHQUFHO1FBQ0gsR0FBRztRQUNILE1BQU07UUFDTixLQUFLO0tBQ04sQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsa0JBQWtCLEVBQWlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFTlYgfSBmcm9tICcuLi8uLi9jb21tb24vY29uZmlnJztcbmltcG9ydCB7IElMb2NhbFN0b3JhZ2UgfSBmcm9tICcuLi8uLi90eXBlcy9zdG9yYWdlJztcbmltcG9ydCB7IGRlY3J5cHQsIGVuY3J5cHQgfSBmcm9tICcuLi9jcnlwdG8nO1xuXG5pbnRlcmZhY2UgU3RvcmFnZURhdGE8VD4ge1xuICB2YWx1ZTogVDtcbiAgZXhwaXJlOiBudW1iZXIgfCBudWxsO1xufVxuXG5sZXQgbG9jYWxTdG9yYWdlOiB7XG4gIHNldEl0ZW06IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4gdm9pZDtcbiAgZ2V0SXRlbTogKGtleTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gIHJlbW92ZUl0ZW06IChrZXk6IHN0cmluZykgPT4gdm9pZDtcbiAgY2xlYXI6ICgpID0+IHZvaWQ7XG59O1xuaWYgKEVOVi5pc0Jyb3dzZXIpIHtcbiAgbG9jYWxTdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbn0gZWxzZSB7XG4gIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgbG9jYWxTdG9yYWdlID0ge1xuICAgIGNsZWFyKCkge1xuICAgICAgbWFwLmNsZWFyKCk7XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH0sXG4gICAgZ2V0SXRlbShrZXkpIHtcbiAgICAgIHJldHVybiBtYXAuZ2V0KGtleSk7XG4gICAgfSxcbiAgICByZW1vdmVJdGVtKGtleSkge1xuICAgICAgbWFwLmRlbGV0ZShrZXkpO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LFxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSkge1xuICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYWxTdG9yYWdlPFQgZXh0ZW5kcyBJTG9jYWxTdG9yYWdlID0gSUxvY2FsU3RvcmFnZT4oKSB7XG4gIC8qKiBUaGUgZGVmYXVsdCBjYWNoZSBwZXJpb2QgaXMgNyBkYXlzICovXG4gIGNvbnN0IERFRkFVTFRfQ0FDSEVfVElNRSA9IDYwICogNjAgKiAyNCAqIDc7XG5cbiAgZnVuY3Rpb24gc2V0PEsgZXh0ZW5kcyBrZXlvZiBUPihrZXk6IEssIHZhbHVlOiBUW0tdLCBleHBpcmU6IG51bWJlciB8IG51bGwgPSBERUZBVUxUX0NBQ0hFX1RJTUUpIHtcbiAgICBjb25zdCBzdG9yYWdlRGF0YTogU3RvcmFnZURhdGE8VFtLXT4gPSB7XG4gICAgICB2YWx1ZSxcbiAgICAgIGV4cGlyZTogZXhwaXJlICE9PSBudWxsID8gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBleHBpcmUgKiAxMDAwIDogbnVsbCxcbiAgICB9O1xuXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5IGFzIHN0cmluZywgZW5jcnlwdChzdG9yYWdlRGF0YSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0PEsgZXh0ZW5kcyBrZXlvZiBUPihrZXk6IEspIHtcbiAgICBjb25zdCBqc29uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5IGFzIHN0cmluZyk7XG4gICAgaWYgKCFqc29uKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgc3RvcmFnZURhdGE6IFN0b3JhZ2VEYXRhPFRbS10+IHwgbnVsbCA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIHN0b3JhZ2VEYXRhID0gZGVjcnlwdChqc29uKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIFByZXZlbnQgcGFyc2luZyBmYWlsdXJlXG4gICAgfVxuICAgIGlmICghc3RvcmFnZURhdGEpIHtcbiAgICAgIHJlbW92ZShrZXkpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyB2YWx1ZSwgZXhwaXJlIH0gPSBzdG9yYWdlRGF0YTtcbiAgICAvLyBSZXR1cm4gZGlyZWN0bHkgd2l0aGluIHRoZSB2YWxpZGl0eSBwZXJpb2RcbiAgICBpZiAoIShleHBpcmUgPT09IG51bGwgfHwgZXhwaXJlID49IERhdGUubm93KCkpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmUoa2V5OiBrZXlvZiBUKSB7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5IGFzIHN0cmluZyk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0LFxuICAgIGdldCxcbiAgICByZW1vdmUsXG4gICAgY2xlYXIsXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBsb2NhbFN0ZyA9IGNyZWF0ZUxvY2FsU3RvcmFnZTxJTG9jYWxTdG9yYWdlPigpO1xuIl19