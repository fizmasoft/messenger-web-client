import { ENV } from '../../common/config';
import { decrypt, encrypt } from '../crypto';
let localStorage;
if (ENV.isBrowser) {
    localStorage = window.localStorage;
}
else {
    const map = new Map();
    localStorage = {
        clear() {
            map.clear();
            return map;
        },
        getItem(key) {
            return map.get(key);
        },
        removeItem(key) {
            map.delete(key);
            return map;
        },
        setItem(key, value) {
            map.set(key, value);
            return map;
        },
    };
}
const secret = "fdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeq";
function createLocalStorage() {
    /** The default cache period is 7 days */
    const DEFAULT_CACHE_TIME = 60 * 60 * 24 * 7;
    function set(key, value, expire = DEFAULT_CACHE_TIME) {
        const storageData = {
            value,
            expire: expire !== null ? new Date().getTime() + expire * 1000 : null,
        };
        localStorage.setItem(key, encrypt(storageData, secret));
    }
    function get(key) {
        const json = localStorage.getItem(key);
        if (!json) {
            return null;
        }
        let storageData = null;
        try {
            storageData = decrypt(json, secret);
        }
        catch (_a) {
            // Prevent parsing failure
        }
        if (!storageData) {
            remove(key);
            return null;
        }
        const { value, expire } = storageData;
        // Return directly within the validity period
        if (!(expire === null || expire >= Date.now())) {
            return null;
        }
        return value;
    }
    function remove(key) {
        localStorage.removeItem(key);
    }
    function clear() {
        localStorage.clear();
    }
    return {
        set,
        get,
        remove,
        clear,
    };
}
export const localStg = createLocalStorage();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvc3RvcmFnZS9sb2NhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFPN0MsSUFBSSxZQUtILENBQUM7QUFDRixJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNsQixZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztBQUNyQyxDQUFDO0tBQU0sQ0FBQztJQUNOLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDdEIsWUFBWSxHQUFHO1FBQ2IsS0FBSztZQUNILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNaLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztRQUNELE9BQU8sQ0FBQyxHQUFHO1lBQ1QsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLENBQUM7UUFDRCxVQUFVLENBQUMsR0FBRztZQUNaLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEIsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLO1lBQ2hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3BCLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxNQUFNLEdBQUcsc0dBQXNHLENBQUE7QUFFckgsU0FBUyxrQkFBa0I7SUFDekIseUNBQXlDO0lBQ3pDLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRTVDLFNBQVMsR0FBRyxDQUFvQixHQUFNLEVBQUUsS0FBVyxFQUFFLFNBQXdCLGtCQUFrQjtRQUM3RixNQUFNLFdBQVcsR0FBc0I7WUFDckMsS0FBSztZQUNMLE1BQU0sRUFBRSxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUk7U0FDdEUsQ0FBQztRQUVGLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBYSxFQUFFLE9BQU8sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQsU0FBUyxHQUFHLENBQW9CLEdBQU07UUFDcEMsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFhLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDVixPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxJQUFJLFdBQVcsR0FBNkIsSUFBSSxDQUFDO1FBQ2pELElBQUksQ0FBQztZQUNILFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLENBQUM7UUFBQyxXQUFNLENBQUM7WUFDUCwwQkFBMEI7UUFDNUIsQ0FBQztRQUNELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDWixPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLFdBQVcsQ0FBQztRQUN0Qyw2Q0FBNkM7UUFDN0MsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUMvQyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTLE1BQU0sQ0FBQyxHQUFZO1FBQzFCLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBYSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELFNBQVMsS0FBSztRQUNaLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsT0FBTztRQUNMLEdBQUc7UUFDSCxHQUFHO1FBQ0gsTUFBTTtRQUNOLEtBQUs7S0FDTixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxrQkFBa0IsRUFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSUxvY2FsU3RvcmFnZSB9IGZyb20gJy4uLy4uL3R5cGVzL3N0b3JhZ2UnO1xyXG5cclxuaW1wb3J0IHsgRU5WIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbmZpZyc7XHJcbmltcG9ydCB7IGRlY3J5cHQsIGVuY3J5cHQgfSBmcm9tICcuLi9jcnlwdG8nO1xyXG5cclxuaW50ZXJmYWNlIFN0b3JhZ2VEYXRhPFQ+IHtcclxuICB2YWx1ZTogVDtcclxuICBleHBpcmU6IG51bWJlciB8IG51bGw7XHJcbn1cclxuXHJcbmxldCBsb2NhbFN0b3JhZ2U6IHtcclxuICBzZXRJdGVtOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgZ2V0SXRlbTogKGtleTogc3RyaW5nKSA9PiBzdHJpbmc7XHJcbiAgcmVtb3ZlSXRlbTogKGtleTogc3RyaW5nKSA9PiB2b2lkO1xyXG4gIGNsZWFyOiAoKSA9PiB2b2lkO1xyXG59O1xyXG5pZiAoRU5WLmlzQnJvd3Nlcikge1xyXG4gIGxvY2FsU3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XHJcbn0gZWxzZSB7XHJcbiAgY29uc3QgbWFwID0gbmV3IE1hcCgpO1xyXG4gIGxvY2FsU3RvcmFnZSA9IHtcclxuICAgIGNsZWFyKCkge1xyXG4gICAgICBtYXAuY2xlYXIoKTtcclxuICAgICAgcmV0dXJuIG1hcDtcclxuICAgIH0sXHJcbiAgICBnZXRJdGVtKGtleSkge1xyXG4gICAgICByZXR1cm4gbWFwLmdldChrZXkpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZUl0ZW0oa2V5KSB7XHJcbiAgICAgIG1hcC5kZWxldGUoa2V5KTtcclxuICAgICAgcmV0dXJuIG1hcDtcclxuICAgIH0sXHJcbiAgICBzZXRJdGVtKGtleSwgdmFsdWUpIHtcclxuICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgcmV0dXJuIG1hcDtcclxuICAgIH0sXHJcbiAgfTtcclxufVxyXG5cclxuY29uc3Qgc2VjcmV0ID0gXCJmZGpzMzNzZGVxZmRqczMzc2RlcWZkanMzM3NkZXFmZGpzMzNzZGVxZmRqczMzc2RlcWZkanMzM3NkZXFmZGpzMzNzZGVxZmRqczMzc2RlcWZkanMzM3NkZXFmZGpzMzNzZGVxXCJcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUxvY2FsU3RvcmFnZTxUIGV4dGVuZHMgSUxvY2FsU3RvcmFnZSA9IElMb2NhbFN0b3JhZ2U+KCkge1xyXG4gIC8qKiBUaGUgZGVmYXVsdCBjYWNoZSBwZXJpb2QgaXMgNyBkYXlzICovXHJcbiAgY29uc3QgREVGQVVMVF9DQUNIRV9USU1FID0gNjAgKiA2MCAqIDI0ICogNztcclxuXHJcbiAgZnVuY3Rpb24gc2V0PEsgZXh0ZW5kcyBrZXlvZiBUPihrZXk6IEssIHZhbHVlOiBUW0tdLCBleHBpcmU6IG51bWJlciB8IG51bGwgPSBERUZBVUxUX0NBQ0hFX1RJTUUpIHtcclxuICAgIGNvbnN0IHN0b3JhZ2VEYXRhOiBTdG9yYWdlRGF0YTxUW0tdPiA9IHtcclxuICAgICAgdmFsdWUsXHJcbiAgICAgIGV4cGlyZTogZXhwaXJlICE9PSBudWxsID8gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBleHBpcmUgKiAxMDAwIDogbnVsbCxcclxuICAgIH07XHJcblxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5IGFzIHN0cmluZywgZW5jcnlwdChzdG9yYWdlRGF0YSwgc2VjcmV0KSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXQ8SyBleHRlbmRzIGtleW9mIFQ+KGtleTogSykge1xyXG4gICAgY29uc3QganNvbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSBhcyBzdHJpbmcpO1xyXG4gICAgaWYgKCFqc29uKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzdG9yYWdlRGF0YTogU3RvcmFnZURhdGE8VFtLXT4gfCBudWxsID0gbnVsbDtcclxuICAgIHRyeSB7XHJcbiAgICAgIHN0b3JhZ2VEYXRhID0gZGVjcnlwdChqc29uLCBzZWNyZXQpO1xyXG4gICAgfSBjYXRjaCB7XHJcbiAgICAgIC8vIFByZXZlbnQgcGFyc2luZyBmYWlsdXJlXHJcbiAgICB9XHJcbiAgICBpZiAoIXN0b3JhZ2VEYXRhKSB7XHJcbiAgICAgIHJlbW92ZShrZXkpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IHZhbHVlLCBleHBpcmUgfSA9IHN0b3JhZ2VEYXRhO1xyXG4gICAgLy8gUmV0dXJuIGRpcmVjdGx5IHdpdGhpbiB0aGUgdmFsaWRpdHkgcGVyaW9kXHJcbiAgICBpZiAoIShleHBpcmUgPT09IG51bGwgfHwgZXhwaXJlID49IERhdGUubm93KCkpKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZShrZXk6IGtleW9mIFQpIHtcclxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSBhcyBzdHJpbmcpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBzZXQsXHJcbiAgICBnZXQsXHJcbiAgICByZW1vdmUsXHJcbiAgICBjbGVhcixcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbG9jYWxTdGcgPSBjcmVhdGVMb2NhbFN0b3JhZ2U8SUxvY2FsU3RvcmFnZT4oKTtcclxuIl19