import { ENV } from '../../common/config';
import { decrypt, encrypt } from '../crypto';
let localStorage;
if (ENV.isBrowser) {
    localStorage = window.localStorage;
}
else {
    const map = new Map();
    localStorage = {
        clear() {
            map.clear();
            return map;
        },
        getItem(key) {
            return map.get(key);
        },
        removeItem(key) {
            map.delete(key);
            return map;
        },
        setItem(key, value) {
            map.set(key, value);
            return map;
        },
    };
}
const secret = localStorage.getItem('accessHash');
function createLocalStorage() {
    /** The default cache period is 7 days */
    const DEFAULT_CACHE_TIME = 60 * 60 * 24 * 7;
    function set(key, value, expire = DEFAULT_CACHE_TIME) {
        const storageData = {
            value,
            expire: expire !== null ? new Date().getTime() + expire * 1000 : null,
        };
        localStorage.setItem(key, encrypt(storageData, secret));
    }
    function get(key) {
        const json = localStorage.getItem(key);
        if (!json) {
            return null;
        }
        let storageData = null;
        try {
            storageData = decrypt(json, secret);
        }
        catch (_a) {
            // Prevent parsing failure
        }
        if (!storageData) {
            remove(key);
            return null;
        }
        const { value, expire } = storageData;
        // Return directly within the validity period
        if (!(expire === null || expire >= Date.now())) {
            return null;
        }
        return value;
    }
    function remove(key) {
        localStorage.removeItem(key);
    }
    function clear() {
        localStorage.clear();
    }
    return {
        set,
        get,
        remove,
        clear,
    };
}
export const localStg = createLocalStorage();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvc3RvcmFnZS9sb2NhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFMUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFPN0MsSUFBSSxZQUtILENBQUM7QUFDRixJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNsQixZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztBQUNyQyxDQUFDO0tBQU0sQ0FBQztJQUNOLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDdEIsWUFBWSxHQUFHO1FBQ2IsS0FBSztZQUNILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNaLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztRQUNELE9BQU8sQ0FBQyxHQUFHO1lBQ1QsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLENBQUM7UUFDRCxVQUFVLENBQUMsR0FBRztZQUNaLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEIsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLO1lBQ2hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3BCLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUVsRCxTQUFTLGtCQUFrQjtJQUN6Qix5Q0FBeUM7SUFDekMsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFNUMsU0FBUyxHQUFHLENBQW9CLEdBQU0sRUFBRSxLQUFXLEVBQUUsU0FBd0Isa0JBQWtCO1FBQzdGLE1BQU0sV0FBVyxHQUFzQjtZQUNyQyxLQUFLO1lBQ0wsTUFBTSxFQUFFLE1BQU0sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSTtTQUN0RSxDQUFDO1FBRUYsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFhLEVBQUUsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxTQUFTLEdBQUcsQ0FBb0IsR0FBTTtRQUNwQyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQWEsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNWLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELElBQUksV0FBVyxHQUE2QixJQUFJLENBQUM7UUFDakQsSUFBSSxDQUFDO1lBQ0gsV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUFDLFdBQU0sQ0FBQztZQUNQLDBCQUEwQjtRQUM1QixDQUFDO1FBQ0QsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNaLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsV0FBVyxDQUFDO1FBQ3RDLDZDQUE2QztRQUM3QyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQy9DLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELFNBQVMsTUFBTSxDQUFDLEdBQVk7UUFDMUIsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFhLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsU0FBUyxLQUFLO1FBQ1osWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxPQUFPO1FBQ0wsR0FBRztRQUNILEdBQUc7UUFDSCxNQUFNO1FBQ04sS0FBSztLQUNOLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLGtCQUFrQixFQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRU5WIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbmZpZyc7XHJcbmltcG9ydCB7IElMb2NhbFN0b3JhZ2UgfSBmcm9tICcuLi8uLi90eXBlcy9zdG9yYWdlJztcclxuaW1wb3J0IHsgZGVjcnlwdCwgZW5jcnlwdCB9IGZyb20gJy4uL2NyeXB0byc7XHJcblxyXG5pbnRlcmZhY2UgU3RvcmFnZURhdGE8VD4ge1xyXG4gIHZhbHVlOiBUO1xyXG4gIGV4cGlyZTogbnVtYmVyIHwgbnVsbDtcclxufVxyXG5cclxubGV0IGxvY2FsU3RvcmFnZToge1xyXG4gIHNldEl0ZW06IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4gdm9pZDtcclxuICBnZXRJdGVtOiAoa2V5OiBzdHJpbmcpID0+IHN0cmluZztcclxuICByZW1vdmVJdGVtOiAoa2V5OiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgY2xlYXI6ICgpID0+IHZvaWQ7XHJcbn07XHJcbmlmIChFTlYuaXNCcm93c2VyKSB7XHJcbiAgbG9jYWxTdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcclxufSBlbHNlIHtcclxuICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XHJcbiAgbG9jYWxTdG9yYWdlID0ge1xyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgIG1hcC5jbGVhcigpO1xyXG4gICAgICByZXR1cm4gbWFwO1xyXG4gICAgfSxcclxuICAgIGdldEl0ZW0oa2V5KSB7XHJcbiAgICAgIHJldHVybiBtYXAuZ2V0KGtleSk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlSXRlbShrZXkpIHtcclxuICAgICAgbWFwLmRlbGV0ZShrZXkpO1xyXG4gICAgICByZXR1cm4gbWFwO1xyXG4gICAgfSxcclxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSkge1xyXG4gICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgICByZXR1cm4gbWFwO1xyXG4gICAgfSxcclxuICB9O1xyXG59XHJcblxyXG5jb25zdCBzZWNyZXQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYWNjZXNzSGFzaCcpO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlTG9jYWxTdG9yYWdlPFQgZXh0ZW5kcyBJTG9jYWxTdG9yYWdlID0gSUxvY2FsU3RvcmFnZT4oKSB7XHJcbiAgLyoqIFRoZSBkZWZhdWx0IGNhY2hlIHBlcmlvZCBpcyA3IGRheXMgKi9cclxuICBjb25zdCBERUZBVUxUX0NBQ0hFX1RJTUUgPSA2MCAqIDYwICogMjQgKiA3O1xyXG5cclxuICBmdW5jdGlvbiBzZXQ8SyBleHRlbmRzIGtleW9mIFQ+KGtleTogSywgdmFsdWU6IFRbS10sIGV4cGlyZTogbnVtYmVyIHwgbnVsbCA9IERFRkFVTFRfQ0FDSEVfVElNRSkge1xyXG4gICAgY29uc3Qgc3RvcmFnZURhdGE6IFN0b3JhZ2VEYXRhPFRbS10+ID0ge1xyXG4gICAgICB2YWx1ZSxcclxuICAgICAgZXhwaXJlOiBleHBpcmUgIT09IG51bGwgPyBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIGV4cGlyZSAqIDEwMDAgOiBudWxsLFxyXG4gICAgfTtcclxuXHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXkgYXMgc3RyaW5nLCBlbmNyeXB0KHN0b3JhZ2VEYXRhLCBzZWNyZXQpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldDxLIGV4dGVuZHMga2V5b2YgVD4oa2V5OiBLKSB7XHJcbiAgICBjb25zdCBqc29uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5IGFzIHN0cmluZyk7XHJcbiAgICBpZiAoIWpzb24pIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHN0b3JhZ2VEYXRhOiBTdG9yYWdlRGF0YTxUW0tdPiB8IG51bGwgPSBudWxsO1xyXG4gICAgdHJ5IHtcclxuICAgICAgc3RvcmFnZURhdGEgPSBkZWNyeXB0KGpzb24sIHNlY3JldCk7XHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgLy8gUHJldmVudCBwYXJzaW5nIGZhaWx1cmVcclxuICAgIH1cclxuICAgIGlmICghc3RvcmFnZURhdGEpIHtcclxuICAgICAgcmVtb3ZlKGtleSk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgdmFsdWUsIGV4cGlyZSB9ID0gc3RvcmFnZURhdGE7XHJcbiAgICAvLyBSZXR1cm4gZGlyZWN0bHkgd2l0aGluIHRoZSB2YWxpZGl0eSBwZXJpb2RcclxuICAgIGlmICghKGV4cGlyZSA9PT0gbnVsbCB8fCBleHBpcmUgPj0gRGF0ZS5ub3coKSkpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlKGtleToga2V5b2YgVCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5IGFzIHN0cmluZyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjbGVhcigpIHtcclxuICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHNldCxcclxuICAgIGdldCxcclxuICAgIHJlbW92ZSxcclxuICAgIGNsZWFyLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBsb2NhbFN0ZyA9IGNyZWF0ZUxvY2FsU3RvcmFnZTxJTG9jYWxTdG9yYWdlPigpO1xyXG4iXX0=