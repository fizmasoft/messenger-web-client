import { ENV } from '../../common/config';
import { decrypt, encrypt } from '../crypto';
let localStorage;
if (ENV.isBrowser) {
    localStorage = window.localStorage;
}
else {
    const map = new Map();
    localStorage = {
        clear() {
            map.clear();
            return map;
        },
        getItem(key) {
            return map.get(key);
        },
        removeItem(key) {
            map.delete(key);
            return map;
        },
        setItem(key, value) {
            map.set(key, value);
            return map;
        },
    };
}
function createLocalStorage() {
    /** The default cache period is 7 days */
    const DEFAULT_CACHE_TIME = 60 * 60 * 24 * 7;
    function set(key, value, expire = DEFAULT_CACHE_TIME) {
        const storageData = {
            value,
            expire: expire !== null ? new Date().getTime() + expire * 1000 : null,
        };
        localStorage.setItem(key, encrypt(storageData));
    }
    function get(key) {
        const json = localStorage.getItem(key);
        if (!json) {
            return null;
        }
        let storageData = null;
        try {
            storageData = decrypt(json);
        }
        catch {
            // Prevent parsing failure
        }
        if (!storageData) {
            remove(key);
            return null;
        }
        const { value, expire } = storageData;
        // Return directly within the validity period
        if (!(expire === null || expire >= Date.now())) {
            return null;
        }
        return value;
    }
    function remove(key) {
        localStorage.removeItem(key);
    }
    function clear() {
        localStorage.clear();
    }
    return {
        set,
        get,
        remove,
        clear,
    };
}
export const localStg = createLocalStorage();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvc3RvcmFnZS9sb2NhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFPN0MsSUFBSSxZQUtILENBQUM7QUFDRixJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNsQixZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztBQUNyQyxDQUFDO0tBQU0sQ0FBQztJQUNOLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDdEIsWUFBWSxHQUFHO1FBQ2IsS0FBSztZQUNILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNaLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztRQUNELE9BQU8sQ0FBQyxHQUFHO1lBQ1QsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLENBQUM7UUFDRCxVQUFVLENBQUMsR0FBRztZQUNaLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEIsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLO1lBQ2hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3BCLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxrQkFBa0I7SUFDekIseUNBQXlDO0lBQ3pDLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRTVDLFNBQVMsR0FBRyxDQUFvQixHQUFNLEVBQUUsS0FBVyxFQUFFLFNBQXdCLGtCQUFrQjtRQUM3RixNQUFNLFdBQVcsR0FBc0I7WUFDckMsS0FBSztZQUNMLE1BQU0sRUFBRSxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUk7U0FDdEUsQ0FBQztRQUVGLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBYSxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxTQUFTLEdBQUcsQ0FBb0IsR0FBTTtRQUNwQyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQWEsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNWLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELElBQUksV0FBVyxHQUE2QixJQUFJLENBQUM7UUFDakQsSUFBSSxDQUFDO1lBQ0gsV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixDQUFDO1FBQUMsTUFBTSxDQUFDO1lBQ1AsMEJBQTBCO1FBQzVCLENBQUM7UUFDRCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDakIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1osT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxXQUFXLENBQUM7UUFDdEMsNkNBQTZDO1FBQzdDLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDL0MsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsU0FBUyxNQUFNLENBQUMsR0FBWTtRQUMxQixZQUFZLENBQUMsVUFBVSxDQUFDLEdBQWEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxTQUFTLEtBQUs7UUFDWixZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELE9BQU87UUFDTCxHQUFHO1FBQ0gsR0FBRztRQUNILE1BQU07UUFDTixLQUFLO0tBQ04sQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsa0JBQWtCLEVBQTJCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFTlYgfSBmcm9tICcuLi8uLi9jb21tb24vY29uZmlnJztcclxuaW1wb3J0IHsgZGVjcnlwdCwgZW5jcnlwdCB9IGZyb20gJy4uL2NyeXB0byc7XHJcblxyXG5pbnRlcmZhY2UgU3RvcmFnZURhdGE8VD4ge1xyXG4gIHZhbHVlOiBUO1xyXG4gIGV4cGlyZTogbnVtYmVyIHwgbnVsbDtcclxufVxyXG5cclxubGV0IGxvY2FsU3RvcmFnZToge1xyXG4gIHNldEl0ZW06IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4gdm9pZDtcclxuICBnZXRJdGVtOiAoa2V5OiBzdHJpbmcpID0+IHN0cmluZztcclxuICByZW1vdmVJdGVtOiAoa2V5OiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgY2xlYXI6ICgpID0+IHZvaWQ7XHJcbn07XHJcbmlmIChFTlYuaXNCcm93c2VyKSB7XHJcbiAgbG9jYWxTdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcclxufSBlbHNlIHtcclxuICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XHJcbiAgbG9jYWxTdG9yYWdlID0ge1xyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgIG1hcC5jbGVhcigpO1xyXG4gICAgICByZXR1cm4gbWFwO1xyXG4gICAgfSxcclxuICAgIGdldEl0ZW0oa2V5KSB7XHJcbiAgICAgIHJldHVybiBtYXAuZ2V0KGtleSk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlSXRlbShrZXkpIHtcclxuICAgICAgbWFwLmRlbGV0ZShrZXkpO1xyXG4gICAgICByZXR1cm4gbWFwO1xyXG4gICAgfSxcclxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSkge1xyXG4gICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgICByZXR1cm4gbWFwO1xyXG4gICAgfSxcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMb2NhbFN0b3JhZ2U8VCBleHRlbmRzIFN0b3JhZ2VJbnRlcmZhY2UuSUxvY2FsID0gU3RvcmFnZUludGVyZmFjZS5JTG9jYWw+KCkge1xyXG4gIC8qKiBUaGUgZGVmYXVsdCBjYWNoZSBwZXJpb2QgaXMgNyBkYXlzICovXHJcbiAgY29uc3QgREVGQVVMVF9DQUNIRV9USU1FID0gNjAgKiA2MCAqIDI0ICogNztcclxuXHJcbiAgZnVuY3Rpb24gc2V0PEsgZXh0ZW5kcyBrZXlvZiBUPihrZXk6IEssIHZhbHVlOiBUW0tdLCBleHBpcmU6IG51bWJlciB8IG51bGwgPSBERUZBVUxUX0NBQ0hFX1RJTUUpIHtcclxuICAgIGNvbnN0IHN0b3JhZ2VEYXRhOiBTdG9yYWdlRGF0YTxUW0tdPiA9IHtcclxuICAgICAgdmFsdWUsXHJcbiAgICAgIGV4cGlyZTogZXhwaXJlICE9PSBudWxsID8gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBleHBpcmUgKiAxMDAwIDogbnVsbCxcclxuICAgIH07XHJcblxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5IGFzIHN0cmluZywgZW5jcnlwdChzdG9yYWdlRGF0YSkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0PEsgZXh0ZW5kcyBrZXlvZiBUPihrZXk6IEspIHtcclxuICAgIGNvbnN0IGpzb24gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkgYXMgc3RyaW5nKTtcclxuICAgIGlmICghanNvbikge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc3RvcmFnZURhdGE6IFN0b3JhZ2VEYXRhPFRbS10+IHwgbnVsbCA9IG51bGw7XHJcbiAgICB0cnkge1xyXG4gICAgICBzdG9yYWdlRGF0YSA9IGRlY3J5cHQoanNvbik7XHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgLy8gUHJldmVudCBwYXJzaW5nIGZhaWx1cmVcclxuICAgIH1cclxuICAgIGlmICghc3RvcmFnZURhdGEpIHtcclxuICAgICAgcmVtb3ZlKGtleSk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgdmFsdWUsIGV4cGlyZSB9ID0gc3RvcmFnZURhdGE7XHJcbiAgICAvLyBSZXR1cm4gZGlyZWN0bHkgd2l0aGluIHRoZSB2YWxpZGl0eSBwZXJpb2RcclxuICAgIGlmICghKGV4cGlyZSA9PT0gbnVsbCB8fCBleHBpcmUgPj0gRGF0ZS5ub3coKSkpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlKGtleToga2V5b2YgVCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5IGFzIHN0cmluZyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjbGVhcigpIHtcclxuICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHNldCxcclxuICAgIGdldCxcclxuICAgIHJlbW92ZSxcclxuICAgIGNsZWFyLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBsb2NhbFN0ZyA9IGNyZWF0ZUxvY2FsU3RvcmFnZTxTdG9yYWdlSW50ZXJmYWNlLklMb2NhbD4oKTtcclxuIl19