{"version":3,"sources":["../src/common/config/index.ts","../src/common/constant/response.codes.ts","../src/common/constant/regex.ts","../src/common/utility/date-diff.ts","../src/common/utility/date-formatter.ts","../src/common/utility/num-format.ts","../src/common/utility/num-to-text.ts","../src/common/utility/request/send-https-request.ts","../src/common/utility/date-to-formatted.ts","../src/utils/crypto/index.ts","../src/utils/request/instance.ts","../src/utils/storage/local.ts","../src/utils/storage/session.ts","../src/messenger.ts"],"names":["FormData","https","http","secret","CryptoJS","axios","uuid","_tokenGetter","io"],"mappings":"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","file":"index.js","sourcesContent":["export const ENV = {\r\n  isBrowser: typeof window === 'object' && '[object Window]' === window.toString.call(window),\r\n  isNode: typeof global === 'object' && '[object global]' === global.toString.call(global),\r\n};\r\n","export const RESPONSE_CODES = {\r\n  REFRESH_TOKEN_CODES: [401, 104_401],\r\n};\r\n","export const regexps = {\r\n  DATE_FORMAT_YYYY_MM_DD:\r\n    /^([2-9][0-9][0-9][0-9])\\-(0[1-9]|10|11|12)\\-([012][1-9]|10|20|30|31)$/,\r\n  UZ_PHONE_NUMBER: /^\\+998(33|50|55|65|67|71|77|88|9[01345789])[0-9]{7}$/,\r\n};\r\n\r\n/**\r\n * 33 - Humans\r\n * 50 - Ucell\r\n * 55 - Optik tola\r\n * 65 - Buxoro damashni\r\n * 67 - Sirdaryo damashni\r\n * 71 - Toshkent damashni\r\n * 77 - UMC\r\n */\r\n","\r\nexport function getDateDayDiff(date1: Date, date2: Date = new Date()): number {\r\n  date1.setHours(0, 0, 0, 0)\r\n  date2.setHours(0, 0, 0, 0)\r\n\r\n  return (date1.getTime() - date2.getTime()) / 86400000\r\n}\r\n","const correctDate = (num: number) => (num < 10 ? `0${num}` : num);\r\n\r\n/**\r\n *\r\n * @param date\r\n * @param separator default '-'\r\n * @returns  date string e.g: YYYY-MM-DD\r\n */\r\nexport function getDateYYYYMMDD(date: Date, separator = '-'): string {\r\n  return `${date.getFullYear()}${separator}${correctDate(\r\n    date.getMonth() + 1,\r\n  )}${separator}${correctDate(date.getDate())}`;\r\n}\r\n\r\nexport function getDateMMDDYYYY(date: Date | string, separator = '-'): string {\r\n  date = new Date(date);\r\n  return `${correctDate(date.getMonth() + 1)}${separator}${correctDate(\r\n    date.getDate(),\r\n  )}${separator}${date.getFullYear()}`;\r\n}\r\n\r\nexport function getDateDDMMYYYY(date: Date, separator = '-'): string {\r\n  return `${correctDate(date.getDate())}${separator}${correctDate(\r\n    date.getMonth() + 1,\r\n  )}${separator}${date.getFullYear()}`;\r\n}\r\n","/**\r\n * Returns a string.\r\n * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n */\r\nexport function numberFormat(number: number, fractionDigits = 0, dsep = \".\", tsep = \",\") {\r\n  if (\r\n    isNaN(number) ||\r\n    (typeof number !== \"number\" && typeof number !== \"bigint\")\r\n  )\r\n    return \"\";\r\n\r\n  const numStr = number.toFixed(fractionDigits);\r\n  let pindex = numStr.indexOf(\".\"),\r\n    fnums: string[],\r\n    decimals: string;\r\n  const parts: string[] = [];\r\n\r\n  if (pindex > -1) {\r\n    fnums = numStr.substring(0, pindex).split(\"\");\r\n    decimals = dsep + numStr.substr(pindex + 1);\r\n  } else {\r\n    fnums = numStr.split(\"\");\r\n    decimals = \"\";\r\n  }\r\n\r\n  do {\r\n    parts.unshift(fnums.splice(-3, 3).join(\"\"));\r\n  } while (fnums.length);\r\n\r\n  return parts.join(tsep) + decimals;\r\n}\r\n\r\nexport function numberWithZero(num: number, zeroLen: number): string {\r\n  if (isNaN(num)) return \"\";\r\n\r\n  let zeros = \"\";\r\n\r\n  for (let i = 0; i < zeroLen; i++) {\r\n    zeros += \"0\";\r\n  }\r\n\r\n  return `${zeros}${num}`;\r\n}\r\n","const lettersKril = {\r\n  0: 'ноль',\r\n  1: 'бир',\r\n  2: 'икки',\r\n  3: 'уч',\r\n  4: 'тўрт',\r\n  5: 'беш',\r\n  6: 'олти',\r\n  7: 'етти',\r\n  8: 'саккиз',\r\n  9: 'тўққиз',\r\n};\r\n\r\nconst lettersLotin = {\r\n  0: 'nol',\r\n  1: 'bir',\r\n  2: 'ikki',\r\n  3: 'uch',\r\n  4: \"to'rt\",\r\n  5: 'besh',\r\n  6: 'olti',\r\n  7: 'yetti',\r\n  8: 'sakkiz',\r\n  9: \"to'qqiz\",\r\n};\r\n\r\nconst decimalsKril = {\r\n  0: 'ноль',\r\n  1: 'ўн',\r\n  2: 'йигирма',\r\n  3: 'ўттиз',\r\n  4: 'қирқ',\r\n  5: 'еллик',\r\n  6: 'олтмиш',\r\n  7: 'етмиш',\r\n  8: 'саксон',\r\n  9: 'тўқсон',\r\n};\r\n\r\nconst decimalsLotin = {\r\n  0: 'nol',\r\n  1: \"o'n\",\r\n  2: 'yigirma',\r\n  3: \"o'ttiz\",\r\n  4: 'qirq',\r\n  5: 'ellik',\r\n  6: 'oltmish',\r\n  7: 'yetmish',\r\n  8: 'sakson',\r\n  9: \"to'qson\",\r\n};\r\n\r\nconst thousandsKril = [\r\n  '',\r\n  'минг',\r\n  'миллион',\r\n  'миллиард',\r\n  'трилион',\r\n  'квадриллион',\r\n  'квинтиллион',\r\n  'секстиллион',\r\n  'септиллион',\r\n  'октиллион',\r\n  'нониллион',\r\n  'декалион',\r\n  'ундециллион',\r\n  'додециллион',\r\n  'тредециллион',\r\n  'кваттуордециллион',\r\n  // \"квиндециллион\",\r\n  // \"сексдециллион\",\r\n  // \"септдециллион\",\r\n  // \"октодециллион\",\r\n  // \"новемдециллион\",\r\n  // \"вигин\",\r\n];\r\n\r\nconst thousandsLotin = [\r\n  '',\r\n  'ming',\r\n  'million',\r\n  'milliard',\r\n  'trilion',\r\n  'kvadrillion',\r\n  'kvintillion',\r\n  'sekstillion',\r\n  'septillion',\r\n  'oktillion',\r\n  'nonillion',\r\n  'dekalion',\r\n  'undetsillion',\r\n  'dodetsillion',\r\n  'tredetsillion',\r\n  'kvattuordetsillion',\r\n  // \"квиндециллион\",\r\n  // \"сексдециллион\",\r\n  // \"септдециллион\",\r\n  // \"октодециллион\",\r\n  // \"новемдециллион\",\r\n  // \"вигин\",\r\n];\r\n\r\ntype A = {\r\n  1: string;\r\n  2: string;\r\n  3: string;\r\n  4: string;\r\n  5: string;\r\n  6: string;\r\n  7: string;\r\n  8: string;\r\n  9: string;\r\n};\r\n\r\nexport function numberToText(num: number | string, alphabet: 'lotin' | 'Cyrl') {\r\n  let letters: A, decimals: A, thousands: string[];\r\n  let yuz = 'yuz';\r\n\r\n  if (alphabet === 'lotin') {\r\n    letters = lettersLotin;\r\n    decimals = decimalsLotin;\r\n    thousands = thousandsLotin;\r\n  } else {\r\n    letters = lettersKril;\r\n    decimals = decimalsKril;\r\n    thousands = thousandsKril;\r\n    yuz = 'юз';\r\n  }\r\n\r\n  num = Number(num);\r\n\r\n  if (Number.isNaN(num) || (typeof num !== 'bigint' && typeof num !== 'number')) {\r\n    return 'Invalid number';\r\n  }\r\n\r\n  let beginStr = '';\r\n\r\n  if (num < 0) {\r\n    beginStr = 'minus';\r\n    num = Math.abs(num);\r\n  }\r\n\r\n  if (num === 0) {\r\n    return letters[num];\r\n  }\r\n\r\n  let letterStr = '';\r\n  let groupCount = 0;\r\n\r\n  while (num > 0) {\r\n    let group = num % 1000;\r\n\r\n    if (group > 0) {\r\n      let groupLetterStr = '';\r\n\r\n      if (group >= 100) {\r\n        groupLetterStr += ` ${letters[Math.floor(group / 100)]} ${yuz}`;\r\n        group %= 100;\r\n        if (group > 0) {\r\n          groupLetterStr += ' ';\r\n        }\r\n      }\r\n\r\n      if (group >= 10) {\r\n        groupLetterStr += ` ${decimals[Math.floor(group / 10)]}`;\r\n        group %= 10;\r\n        if (group > 0) {\r\n          groupLetterStr += ' ';\r\n        }\r\n      }\r\n\r\n      if (group > 0) {\r\n        groupLetterStr += ` ${letters[group]}`;\r\n      }\r\n\r\n      if (groupCount > 0) {\r\n        groupLetterStr += ` ${thousands[groupCount]}`;\r\n      }\r\n      // if (letterStr !== \"\") {\r\n      //   letterStr = `${letterStr}`;\r\n      // }\r\n\r\n      letterStr = groupLetterStr + letterStr;\r\n    }\r\n\r\n    num = Math.floor(num / 1000);\r\n    groupCount++;\r\n  }\r\n\r\n  return `${beginStr}${letterStr}`.trim();\r\n}\r\n","import FormData from 'form-data';\r\nimport http from 'http';\r\nimport https, { RequestOptions } from 'https';\r\n\r\ntype BaseRequestHeadersList =\r\n  | 'Accept'\r\n  | 'Content-Length'\r\n  | 'User-Agent'\r\n  | 'Content-Encoding'\r\n  | 'Authorization';\r\n\r\ntype ContentType =\r\n  | 'text/html'\r\n  | 'text/plain'\r\n  | 'multipart/form-data'\r\n  | 'application/json'\r\n  | 'application/x-www-form-urlencoded'\r\n  | 'application/octet-stream';\r\n\r\nexport type RawRequestHeaders = Partial<\r\n  {\r\n    [Key in BaseRequestHeadersList]: any;\r\n  } & {\r\n    'Content-Type': ContentType;\r\n  } & Record<string, any>\r\n>;\r\ntype HTTP_METHOD = 'POST' | 'GET';\r\n\r\nexport interface MyHttpRequestOptions {\r\n  url: string;\r\n  method: HTTP_METHOD;\r\n  body?: string | FormData;\r\n  headers?: RawRequestHeaders;\r\n}\r\n\r\nconst bodyIsRequired: Record<HTTP_METHOD, boolean> = {\r\n  GET: false,\r\n  POST: true,\r\n};\r\n\r\nexport async function request(opts: MyHttpRequestOptions): Promise<unknown> {\r\n  if (bodyIsRequired[opts.method]) opts.body = opts.body || '{}';\r\n\r\n  const reqOptions: RequestOptions = {\r\n    method: opts.method,\r\n    headers:\r\n      opts.body instanceof FormData\r\n        ? opts.body.getHeaders?.() ?? { 'Content-Type': 'multipart/form-data' }\r\n        : opts.headers\r\n        ? opts.headers\r\n        : {\r\n            'Content-Type': 'application/json',\r\n          },\r\n  };\r\n\r\n  const func = opts.url.includes('https://', 0) ? https.request : http.request;\r\n  return await new Promise((resolve, reject) => {\r\n    const req = func(opts.url, reqOptions, (res) => {\r\n      let data = '';\r\n      res\r\n        .on('data', (chunk) => {\r\n          data = data + chunk.toString();\r\n        })\r\n        .on('end', () => {\r\n          resolve(JSON.parse(data));\r\n        })\r\n        .on('error', (err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n\r\n    if (opts.body instanceof FormData) {\r\n      opts.body.pipe(req);\r\n    } else {\r\n      req.write(opts.body);\r\n    }\r\n\r\n    req\r\n      .on('error', (err) => {\r\n        reject(err);\r\n      })\r\n      .end();\r\n  });\r\n}\r\n","export function formatDate(date: Date, separator = '-'): IFormattedDate {\r\n  const locale = 'uz-UZ';\r\n\r\n  return {\r\n    date: date,\r\n    iso: date.toISOString(),\r\n    hh_mm: date\r\n      .toLocaleString(locale, {\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        hour12: false,\r\n      })\r\n      .replace(/\\//g, separator),\r\n    hh_mm_ss: date\r\n      .toLocaleString(locale, {\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n      })\r\n      .replace(/\\//g, separator),\r\n    YYYY_MM_DD: date\r\n      .toLocaleString(locale, {\r\n        day: '2-digit',\r\n        month: '2-digit',\r\n        year: 'numeric',\r\n      })\r\n      .replace(/\\//g, separator),\r\n    YYYY_MM_DD_hh_mm_ss: date\r\n      .toLocaleString(locale, {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n      })\r\n      .replace(/\\//g, separator),\r\n  };\r\n}\r\n\r\nDate.prototype.toFormatted = function (separator = '-') {\r\n  return formatDate(this as Date, separator);\r\n};\r\n\r\nexport {};\r\n\r\ndeclare global {\r\n  interface IFormattedDate {\r\n    date: Date;\r\n    iso: string;\r\n    hh_mm: string;\r\n    hh_mm_ss: string;\r\n    YYYY_MM_DD: string;\r\n    YYYY_MM_DD_hh_mm_ss: string;\r\n  }\r\n\r\n  interface Date {\r\n    toFormatted: (separator?: string) => IFormattedDate;\r\n  }\r\n}\r\n","import CryptoJS from 'crypto-js';\r\n// import crypto, { CipherCCMTypes, CipherGCMTypes, CipherOCBTypes } from 'crypto';\r\n\r\nconst cryptoSecret =\r\n  '$2$2b$10$XfKDhQAQipHbIubP2MEAmOL/Grwuc79IMxV1xbqpUGYAVMXdG9L3GbIubP2ME$2b$10$XfKDhQAQipHbIubP2MEAmOL/Grwuc79IMxV1xbqpUGYAVGXfKDhQAQipHbIubP2MEAmOL/Grwuc79IMxV1xbqpUGYAVMXdG9L3G';\r\n\r\n/**\r\n * Encrypt data\r\n * @param data - data\r\n */\r\nexport function encrypt<T = unknown>(data: T, secret = cryptoSecret) {\r\n  return CryptoJS.AES.encrypt(\r\n    JSON.stringify(data),\r\n    // CryptoJS.lib.WordArray.create(serialize(data).buffer),\r\n    secret,\r\n  ).toString();\r\n}\r\n\r\n/**\r\n * Decrypt data\r\n * @param cipherText - cipher text\r\n */\r\nexport function decrypt<T = unknown>(cipherText: string, secret = cryptoSecret): T | null {\r\n  const bytes = CryptoJS.AES.decrypt(cipherText, secret);\r\n  const originalText = bytes.toString(CryptoJS.enc.Utf8);\r\n  if (originalText) {\r\n    return JSON.parse(originalText);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// function AesUtil(keySize: number, iterationCount: number) {\r\n//   keySize = keySize / 32;\r\n//   iterationCount = iterationCount;\r\n\r\n//   function generateKey(salt: string, passPhrase: string) {\r\n//     const key = CryptoJS.PBKDF2(passPhrase, CryptoJS.enc.Hex.parse(salt), {\r\n//       keySize: keySize,\r\n//       iterations: iterationCount,\r\n//     });\r\n//     return key;\r\n//   }\r\n\r\n//   function encrypt(salt: string, iv: string, passPhrase: string, plainText: string) {\r\n//     const key = generateKey(salt, passPhrase);\r\n//     const encrypted = CryptoJS.AES.encrypt(plainText, key, { iv: CryptoJS.enc.Hex.parse(iv) });\r\n//     return encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r\n//   }\r\n\r\n//   function decrypt(salt: string, iv: string, passPhrase: string, cipherText: string) {\r\n//     const key = generateKey(salt, passPhrase);\r\n//     const cipherParams = CryptoJS.lib.CipherParams.create({\r\n//       ciphertext: CryptoJS.enc.Base64.parse(cipherText),\r\n//     });\r\n//     const decrypted = CryptoJS.AES.decrypt(cipherParams, '1234567891230456', {\r\n//       iv: CryptoJS.enc.Hex.parse(iv),\r\n//     });\r\n\r\n//     return decrypted.toString(CryptoJS.enc.Utf8);\r\n//   }\r\n\r\n//   return {\r\n//     generateKey,\r\n//     encrypt,\r\n//     decrypt,\r\n//   };\r\n// }\r\n\r\n\r\n// function f2() {\r\n//   // const key = '1234567891230456';\r\n//   // const algorithm: CipherCCMTypes | CipherGCMTypes | CipherOCBTypes = 'aes-256-gcm'; // aes-256-cbc\r\n//   const algorithm = 'aes-256-cbc';\r\n//   const key = crypto.randomBytes(32); // Shifrlash uchun kalit\r\n//   const iv = crypto.randomBytes(16); // Inicializatsiya vektori\r\n\r\n//   function encrypt(text) {\r\n//     let cipher = crypto.createCipheriv(algorithm, Buffer.from(key), iv);\r\n//     let encrypted = cipher.update(text, 'utf8', 'hex');\r\n//     encrypted += cipher.final('hex');\r\n//     return {\r\n//       iv: iv.toString('hex'),\r\n//       encryptedData: encrypted,\r\n//     };\r\n//   }\r\n\r\n//   function decrypt(encryptedData, secret = key) {\r\n//     let decipher = crypto.createDecipheriv(\r\n//       algorithm,\r\n//       Buffer.from(secret),\r\n//       Buffer.from(encryptedData.iv, 'hex'),\r\n//     );\r\n//     let decrypted = decipher.update(encryptedData.encryptedData, 'hex', 'utf8');\r\n//     decrypted += decipher.final('utf8');\r\n//     return decrypted;\r\n//   }\r\n\r\n//   // Misol\r\n//   const textToEncrypt = 'Salom, bu shifrlash testidir!';\r\n//   const encrypted = encrypt(textToEncrypt);\r\n//   console.log({\r\n//     key,\r\n//     keyString: key.toString('base64'),\r\n//     iv,\r\n//     ivString: iv.toString('base64'),\r\n//   });\r\n\r\n//   console.log('Shifrlangan:', encrypted);\r\n\r\n//   const decrypted = decrypt(encrypted);\r\n//   console.log('Deshifrlangan:', decrypted);\r\n// }\r\n","import type { IUserLogin } from '../../types/api/auth';\r\nimport type { LangType } from '../../types/system';\r\n\r\nimport type { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { localStg } from '../';\r\nimport { RESPONSE_CODES } from '../../common/constant';\r\n\r\ntype RefreshRequestQueue = (config: AxiosRequestConfig) => void;\r\n\r\n/**\r\n * Encapsulate axios request class\r\n * @author Umar<creativeboy1999@gmail.com>\r\n */\r\nexport class CustomAxiosInstance {\r\n  readonly instance: AxiosInstance;\r\n  readonly #tokenGetter:\r\n    | { access: string; refresh: string }\r\n    | (() => Promise<{ access: string; refresh: string }>);\r\n  #isRefreshing: boolean;\r\n  #refreshTokenUrl: string;\r\n  #languageGetter: () => LangType;\r\n\r\n  #retryQueues: RefreshRequestQueue[];\r\n\r\n  /**\r\n   *\r\n   * @param axiosConfig - axios configuration\r\n   */\r\n  constructor(\r\n    axiosConfig: AxiosRequestConfig,\r\n    {\r\n      tokenGetter,\r\n      refreshTokenUrl,\r\n      languageGetter,\r\n    }: {\r\n      refreshTokenUrl?: string;\r\n      languageGetter: () => LangType;\r\n      tokenGetter:\r\n        | { access: string; refresh: string }\r\n        | (() => Promise<{ access: string; refresh: string }>);\r\n    },\r\n  ) {\r\n    this.#languageGetter = languageGetter;\r\n    this.instance = axios.create(axiosConfig);\r\n    this.#isRefreshing = false;\r\n    this.#retryQueues = [];\r\n    this.#refreshTokenUrl = refreshTokenUrl;\r\n    this.#setInterceptor();\r\n  }\r\n\r\n  async #handleRefreshToken() {\r\n    if (!localStg.get('messengerToken')?.refresh) {\r\n      let token: {\r\n        access: string;\r\n        refresh: string;\r\n      };\r\n\r\n      if (typeof this.#tokenGetter === 'function') {\r\n        token = await this.#tokenGetter();\r\n      } else {\r\n        token = this.#tokenGetter;\r\n      }\r\n      localStg.set('messengerToken', token);\r\n    }\r\n\r\n    const {\r\n      data: { data },\r\n    } = await axios\r\n      .create(this.instance.defaults)\r\n      .get<{ data: IUserLogin }>(this.#refreshTokenUrl, {\r\n        headers: { Authorization: `Bearer ${localStg.get('messengerToken')?.refresh || ''}` },\r\n      });\r\n    if (data && data.token) {\r\n      localStg.set('messengerToken', {\r\n        access: data.token.accessToken,\r\n        refresh: data.token.refreshToken,\r\n      });\r\n    }\r\n\r\n    return data.token.accessToken;\r\n  }\r\n\r\n  async #refreshTokenAndReRequest(response: AxiosResponse<any>) {\r\n    if (this.#isRefreshing) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.#isRefreshing = true;\r\n      const accessToken = await this.#handleRefreshToken();\r\n      if (accessToken) {\r\n        response.config.headers.Authorization = `Bearer ${accessToken}`;\r\n        this.#retryQueues.map((cb) => cb(response.config));\r\n      }\r\n      this.#retryQueues = [];\r\n      this.#isRefreshing = false;\r\n    } catch (error) {\r\n      this.#retryQueues = [];\r\n      this.#isRefreshing = false;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /** Set request interceptor */\r\n  #setInterceptor() {\r\n    this.instance.interceptors.request.use(async (config) => {\r\n      const handleConfig = { ...config };\r\n      handleConfig.headers['x-app-lang'] = (this.#languageGetter() || 'Uz-Latin') as LangType; // dynamically fetching language info\r\n\r\n      if (handleConfig.headers) {\r\n        // Set token\r\n        handleConfig.headers.Authorization = `Bearer ${\r\n          localStg.get('messengerToken')?.access || ''\r\n        }`;\r\n      }\r\n\r\n      return handleConfig;\r\n    });\r\n\r\n    this.instance.interceptors.response.use(\r\n      (response) => response,\r\n      async (axiosError: AxiosError) => {\r\n        if (\r\n          (axiosError.response?.data['code'] &&\r\n            RESPONSE_CODES.REFRESH_TOKEN_CODES.includes(axiosError.response?.data['code'])) ||\r\n          RESPONSE_CODES.REFRESH_TOKEN_CODES.includes(axiosError.response?.status)\r\n        ) {\r\n          // original request\r\n          const originRequest = new Promise((resolve) => {\r\n            this.#retryQueues.push((refreshConfig: AxiosRequestConfig) => {\r\n              resolve(this.instance.request(refreshConfig));\r\n            });\r\n          });\r\n\r\n          await this.#refreshTokenAndReRequest(axiosError.response);\r\n\r\n          return originRequest;\r\n        }\r\n        throw axiosError;\r\n      },\r\n    );\r\n  }\r\n}\r\n","import type { ILocalStorage } from '../../types/storage';\r\n\r\nimport { ENV } from '../../common/config';\r\nimport { decrypt, encrypt } from '../crypto';\r\n\r\ninterface StorageData<T> {\r\n  value: T;\r\n  expire: number | null;\r\n}\r\n\r\nlet localStorage: {\r\n  setItem: (key: string, value: string) => void;\r\n  getItem: (key: string) => string;\r\n  removeItem: (key: string) => void;\r\n  clear: () => void;\r\n};\r\nif (ENV.isBrowser) {\r\n  localStorage = window.localStorage;\r\n} else {\r\n  const map = new Map();\r\n  localStorage = {\r\n    clear() {\r\n      map.clear();\r\n      return map;\r\n    },\r\n    getItem(key) {\r\n      return map.get(key);\r\n    },\r\n    removeItem(key) {\r\n      map.delete(key);\r\n      return map;\r\n    },\r\n    setItem(key, value) {\r\n      map.set(key, value);\r\n      return map;\r\n    },\r\n  };\r\n}\r\n\r\nconst secret = \"fdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeqfdjs33sdeq\"\r\n\r\nfunction createLocalStorage<T extends ILocalStorage = ILocalStorage>() {\r\n  /** The default cache period is 7 days */\r\n  const DEFAULT_CACHE_TIME = 60 * 60 * 24 * 7;\r\n\r\n  function set<K extends keyof T>(key: K, value: T[K], expire: number | null = DEFAULT_CACHE_TIME) {\r\n    const storageData: StorageData<T[K]> = {\r\n      value,\r\n      expire: expire !== null ? new Date().getTime() + expire * 1000 : null,\r\n    };\r\n\r\n    localStorage.setItem(key as string, encrypt(storageData, secret));\r\n  }\r\n\r\n  function get<K extends keyof T>(key: K) {\r\n    const json = localStorage.getItem(key as string);\r\n    if (!json) {\r\n      return null;\r\n    }\r\n\r\n    let storageData: StorageData<T[K]> | null = null;\r\n    try {\r\n      storageData = decrypt(json, secret);\r\n    } catch {\r\n      // Prevent parsing failure\r\n    }\r\n    if (!storageData) {\r\n      remove(key);\r\n      return null;\r\n    }\r\n\r\n    const { value, expire } = storageData;\r\n    // Return directly within the validity period\r\n    if (!(expire === null || expire >= Date.now())) {\r\n      return null;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  function remove(key: keyof T) {\r\n    localStorage.removeItem(key as string);\r\n  }\r\n\r\n  function clear() {\r\n    localStorage.clear();\r\n  }\r\n\r\n  return {\r\n    set,\r\n    get,\r\n    remove,\r\n    clear,\r\n  };\r\n}\r\n\r\nexport const localStg = createLocalStorage<ILocalStorage>();\r\n","import { decrypt, encrypt } from '../crypto';\r\n\r\nfunction createSessionStorage<T extends WindowSessionStorage = WindowSessionStorage>() {\r\n  function set<K extends keyof T>(key: K, value: T[K]) {\r\n    sessionStorage.setItem(key as string, encrypt(value));\r\n  }\r\n\r\n  function get<K extends keyof T>(key: K) {\r\n    const json = sessionStorage.getItem(key as string);\r\n    let data: T[K] | null = null;\r\n    if (json) {\r\n      try {\r\n        data = decrypt(json);\r\n      } catch {\r\n        // Prevent parsing failure\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  function remove(key: keyof T) {\r\n    window.sessionStorage.removeItem(key as string);\r\n  }\r\n\r\n  function clear() {\r\n    window.sessionStorage.clear();\r\n  }\r\n\r\n  return {\r\n    set,\r\n    get,\r\n    remove,\r\n    clear,\r\n  };\r\n}\r\n\r\nexport const sessionStg = createSessionStorage();\r\n","import type { ManagerOptions, Socket, SocketOptions } from 'socket.io-client';\r\nimport type { DefaultEventsMap } from '@socket.io/component-emitter';\r\nimport type { AxiosInstance } from 'axios';\r\nimport type FormData from 'form-data';\r\n\r\nimport type { IMessage, ISendMessage, ISendMessageToArea } from './types/api/message';\r\nimport type { MyApiResponse } from './types/api';\r\nimport type { FilterPolygonArea } from './types/api/area.filter';\r\nimport type { ChatType, IChat } from './types/api/chat';\r\nimport type { IOnUpdate, MessageType } from './types/api/message.types';\r\nimport type { IUser } from './types/api/user';\r\nimport type { CustomOptions, IEvents, IPollingOptions, ISocketOptions } from './types/types';\r\n\r\nimport io from 'socket.io-client';\r\nimport uuid from 'uuid';\r\n\r\nimport { ENV } from './common/config';\r\nimport { DeviceTypesEnum } from './types/types';\r\nimport { CustomAxiosInstance, localStg } from './utils';\r\n\r\nconst localUid = localStg.get('messengerDeviceUid');\r\nconst uid = localUid ? localUid : uuid.v1();\r\nlocalStg.set('messengerDeviceUid', uid);\r\nlet appVersion = '1.5.6';\r\n\r\n// readFile(join(process.cwd() + '/package.json'))\r\n//   .then((v) => {\r\n//     const json = JSON.parse(v.toString());\r\n//     appVersion = json.version;\r\n//   })\r\n//   .catch((err) => {\r\n//   });\r\n\r\nconst getDeviceModel = (): string => {\r\n  if (ENV.isBrowser && typeof navigator !== 'undefined') {\r\n    return `${navigator.userAgent} | ${navigator.platform}`;\r\n  } else if (ENV.isNode && typeof process !== 'undefined') {\r\n    return `${process.platform} | ${process.arch} | Nodejs: ${process.version}`;\r\n  }\r\n\r\n  return 'Unknown';\r\n};\r\n\r\nconst requiredHeaders = {\r\n  'x-device-type': DeviceTypesEnum.WEB,\r\n  'x-device-model': getDeviceModel(),\r\n  // 'x-app-lang': (languageGetter() || 'Uz-Latin') as I18nType.LangType, // dynamically fetching language info\r\n  'x-app-version': appVersion,\r\n  'x-app-uid': uid,\r\n};\r\n\r\nfunction queryStringify(obj: Record<string, any>, parentKey?: string): string {\r\n  if (!obj) {\r\n    return '';\r\n  }\r\n\r\n  return Object.keys(obj)\r\n    .map((key) => {\r\n      if (Array.isArray(obj[key])) {\r\n        if (parentKey) {\r\n          return obj[key]\r\n            .map((item) => `${parentKey}[${key}]=${encodeURIComponent(item)}`)\r\n            .join('&');\r\n        }\r\n\r\n        return obj[key].map((item) => `${key}=${encodeURIComponent(item)}`).join('&');\r\n      }\r\n\r\n      if (typeof obj[key] === 'object') {\r\n        if (parentKey) {\r\n          return queryStringify(obj[key], `${parentKey}[${key}]`);\r\n        }\r\n\r\n        return queryStringify(obj[key], key);\r\n      }\r\n\r\n      if (obj[key] === null || obj[key] === undefined) {\r\n        return null;\r\n      }\r\n\r\n      if (parentKey) {\r\n        return `${parentKey}[${key}]=${encodeURIComponent(obj[key])}`;\r\n      }\r\n\r\n      return `${key}=${encodeURIComponent(obj[key])}`;\r\n    })\r\n    .filter(Boolean)\r\n    .join('&');\r\n}\r\n\r\nclass Messenger {\r\n  #pollingInterval: NodeJS.Timer;\r\n  readonly #polling: IPollingOptions;\r\n  readonly #socket: ISocketOptions;\r\n  readonly #axiosInstance: AxiosInstance;\r\n\r\n  user: {\r\n    _id: string;\r\n    image: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    middleName: string;\r\n    email: string | null;\r\n    username: string;\r\n    phoneNumber: string;\r\n    birthday: string | null;\r\n    deviceUid: string | null;\r\n    // position: null;\r\n    // group: null;\r\n    // mfy: null;\r\n    // gom: null;\r\n    // district: null;\r\n    // divisionId: null;\r\n  };\r\n\r\n  #events: Partial<{\r\n    [EventName in keyof IEvents]: IEvents[EventName][];\r\n  }>;\r\n  // Record<\r\n  // EventName extends keyof IEvents,\r\n  //   (EventName extends keyof IEvents ? IEvents[EventName] : (...args: any[]) => void)[]\r\n  // >\r\n  #updatesHash: string = '';\r\n  readonly #baseURL: string;\r\n  #token: { access: string; refresh: string };\r\n  readonly #tokenGetter:\r\n    | { access: string; refresh: string }\r\n    | (() => Promise<{ access: string; refresh: string }>);\r\n\r\n  public uid: string;\r\n  public socket: Socket<DefaultEventsMap, DefaultEventsMap> | null;\r\n\r\n  constructor(\r\n    {\r\n      baseURL,\r\n      token,\r\n      polling = null,\r\n      socket = null,\r\n      languageGetter = () => 'Uz-Latin',\r\n      headers = {},\r\n    }: CustomOptions,\r\n    options: Partial<ManagerOptions & SocketOptions> = {},\r\n  ) {\r\n    this.uid = uid;\r\n    this.#polling = polling;\r\n    this.#socket = socket;\r\n    this.#baseURL = baseURL;\r\n    this.#events = { update: [], updateUser: [], updateMessage: [] };\r\n    this.#token = { access: '', refresh: '' };\r\n    this.#tokenGetter = token;\r\n    this.#axiosInstance = new CustomAxiosInstance(\r\n      { baseURL: baseURL, headers: requiredHeaders },\r\n      {\r\n        refreshTokenUrl: '/v1/auth/refresh-token',\r\n        languageGetter,\r\n        tokenGetter: token,\r\n      },\r\n    ).instance;\r\n\r\n    this.init = this.init.bind(this);\r\n    this.close = this.close.bind(this);\r\n    this.initPolling = this.initPolling.bind(this);\r\n    this.on = this.on.bind(this);\r\n    this.searchUser = this.searchUser.bind(this);\r\n    this.getChatMessages = this.getChatMessages.bind(this);\r\n    this.getChatInfo = this.getChatInfo.bind(this);\r\n    this.getChatMedia = this.getChatMedia.bind(this);\r\n    this.getChatFiles = this.getChatFiles.bind(this);\r\n    this.getChatAudios = this.getChatAudios.bind(this);\r\n    this.getUpdates = this.getUpdates.bind(this);\r\n    this.readMessage = this.readMessage.bind(this);\r\n    this.getChats = this.getChats.bind(this);\r\n    this.sendMessageToArea = this.sendMessageToArea.bind(this);\r\n    this.init();\r\n  }\r\n\r\n  public close() {\r\n    if (this.socket) {\r\n      this.socket.close();\r\n      return;\r\n    }\r\n\r\n    clearInterval(this.#pollingInterval);\r\n    this.#pollingInterval = undefined;\r\n  }\r\n\r\n  private initPolling() {\r\n    if (this.#pollingInterval) {\r\n      clearInterval(this.#pollingInterval);\r\n    }\r\n\r\n    const getUpdates = this.getUpdates;\r\n    const polling = this.#polling;\r\n    const events = this.#events;\r\n    async function intervalCallback() {\r\n      const { updates } = await getUpdates({ limit: polling.limit });\r\n      if (events['update'] && updates.updates) {\r\n        updates.updates.map((update) => {\r\n          events['update'].map((cb) => cb(update));\r\n        });\r\n      }\r\n\r\n      if (events['updateUser'] && updates.users) {\r\n        updates.users.map((user) => {\r\n          events['updateUser'].map((cb) => cb(user));\r\n        });\r\n      }\r\n\r\n      if (events['updateMessage'] && updates.messages) {\r\n        updates.messages.map((message) => {\r\n          events['updateMessage'].map((cb) => cb(message));\r\n        });\r\n      }\r\n    }\r\n\r\n    this.#pollingInterval = setInterval(intervalCallback, polling.interval);\r\n  }\r\n\r\n  async init() {\r\n    if (typeof this.#tokenGetter === 'function') {\r\n      this.#token = await this.#tokenGetter();\r\n    } else {\r\n      this.#token = this.#tokenGetter;\r\n    }\r\n    localStg.set('messengerToken', this.#token);\r\n\r\n    const { data: me } = await this.#axiosInstance\r\n      .get('/v1/auth/me')\r\n      .catch((err) => ({ data: { success: false } }));\r\n    if (me.success) {\r\n      this.user = me.data;\r\n    }\r\n\r\n    if (this.#socket !== null) {\r\n      this.socket = io(this.#socket.baseUrl, {\r\n        path: this.#socket.path,\r\n        auth: (cb) =>\r\n          cb({\r\n            ...requiredHeaders,\r\n            token: this.#token.access,\r\n          }),\r\n        autoConnect: true,\r\n        reconnection: true, // default setting at present\r\n        reconnectionDelay: 1000, // default setting at present\r\n        reconnectionDelayMax: 5000, // default setting at present\r\n        reconnectionAttempts: Infinity, // default setting at present\r\n        // extraHeaders: { ...requiredHeaders, token: this.#token.access },\r\n      });\r\n    }\r\n\r\n    if (this.#polling) {\r\n      this.initPolling();\r\n      if (Array.isArray(this.#events['connect'])) {\r\n        this.#events['connect'].map((cb) =>\r\n          cb({\r\n            message: `Polling successfully connected`,\r\n            socket: this.socket,\r\n          }),\r\n        );\r\n      }\r\n      return this;\r\n    }\r\n    const events = this.#events;\r\n\r\n    return this.socket\r\n      .connect()\r\n      .on('connect', () => {\r\n        if (!Array.isArray(events['connect'])) {\r\n          return;\r\n        }\r\n        events['connect'].map((cb) =>\r\n          cb({\r\n            message: `Socket successfully connected. socket.id: ${this.socket.id}`,\r\n            socket: this.socket,\r\n          }),\r\n        );\r\n      })\r\n      .on('disconnect', (reason, details) => {\r\n        if (!Array.isArray(events['disconnect'])) {\r\n          return;\r\n        }\r\n\r\n        events['disconnect'].map((cb) =>\r\n          cb({\r\n            reason,\r\n            details,\r\n            message: `Socket disconnected: id: ${\r\n              this.socket.id\r\n            }, reason: ${reason}, details: ${JSON.stringify(details)}`,\r\n            socket: this.socket,\r\n          }),\r\n        );\r\n      })\r\n      .on('connect_error', (err) => {\r\n        if (!events['socketConnectionError'] || !Array.isArray(events['socketConnectionError'])) {\r\n          return;\r\n        }\r\n\r\n        if (this.socket.active) {\r\n          events['socketConnectionError'].map((cb) =>\r\n            cb({\r\n              message: 'temporary failure, the socket will automatically try to reconnect',\r\n              error: err,\r\n            }),\r\n          );\r\n        } else {\r\n          events['socketConnectionError'].map((cb) =>\r\n            cb({\r\n              message: `\r\n                the connection was denied by the server\r\n                in that case, socket.connect() must be manually called in order to reconnect.\r\n                Error: ${err.message}\r\n              `,\r\n              error: err,\r\n            }),\r\n          );\r\n        }\r\n      })\r\n      .onAny((eventName, ...updates) => {\r\n        switch (eventName) {\r\n          case 'message:new':\r\n            // ! buni keyin olib tashlash kerak\r\n            updates.map((update) => this.socket.emit('message:received', update.message._id));\r\n            events.update.map((cb: (...args: any) => void) => cb.apply(null, updates));\r\n            return;\r\n          case 'message:read':\r\n            events.updateMessage.map((cb: (...args: any) => void) => cb.apply(null, updates));\r\n            return;\r\n          case 'user:update':\r\n            events.updateUser.map((cb: (...args: any) => void) => cb.apply(null, updates));\r\n            return;\r\n\r\n          default:\r\n            break;\r\n        }\r\n\r\n        if (!events[eventName]) {\r\n          return;\r\n        }\r\n\r\n        events[eventName].map((cb: (...args: any) => void) => cb.apply(null, updates));\r\n      });\r\n  }\r\n\r\n  // public on<EventName extends keyof IEvents = 'update'>(\r\n  //   event: EventName,\r\n  //   cb: IEvents[EventName],\r\n  // ): this;\r\n  on<EventName extends keyof IEvents = 'update'>(event: EventName, cb: IEvents[EventName]): this {\r\n    if (this.#events[event] && Array.isArray(this.#events[event])) {\r\n      this.#events[event].push(cb);\r\n    } else {\r\n      this.#events[event] = [cb] as any;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public eventNames(): string[] {\r\n    return Object.keys(this.#events);\r\n  }\r\n\r\n  public removeAllListeners(event?: keyof IEvents): this {\r\n    if (event) {\r\n      this.#events[event] = [];\r\n      return;\r\n    }\r\n\r\n    this.#events = {};\r\n    return this;\r\n  }\r\n\r\n  public removeListener(event: keyof IEvents, callback: any): this {\r\n    if (!this.#events[event] || !Array.isArray(this.#events[event])) {\r\n      return;\r\n    }\r\n\r\n    this.#events[event].filter((cb) => cb.name !== callback.name);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param search id or username\r\n   * @returns {[]}\r\n   */\r\n  public async searchUser(\r\n    query: { limit?: number; page?: number; search?: string } & Record<string, any> = {\r\n      limit: 20,\r\n      page: 1,\r\n      search: '',\r\n    },\r\n  ): Promise<MyApiResponse<IUser>> {\r\n    const { data } = await this.#axiosInstance.get<MyApiResponse<IUser>>(\r\n      `/v1/users??${queryStringify(query)}`,\r\n    );\r\n\r\n    return data;\r\n  }\r\n\r\n  public async sendMessage(\r\n    chatId: string,\r\n    message: ISendMessage | FormData,\r\n  ): Promise<MyApiResponse<IUser>> {\r\n    const { data } = await this.#axiosInstance.post(`/v1/chats/${chatId}/messages`, message);\r\n\r\n    return data;\r\n  }\r\n\r\n  public async sendMessageToNewUser(message: ISendMessage): Promise<MyApiResponse<IUser>> {\r\n    const { data } = await this.#axiosInstance.post(`/v1/users/message`, message);\r\n\r\n    return data;\r\n  }\r\n\r\n  public async sendMessageToArea(\r\n    filter: FilterPolygonArea,\r\n    message: ISendMessageToArea,\r\n  ): Promise<MyApiResponse<IUser>> {\r\n    const { data } = await this.#axiosInstance.post(`/v1/users/message-by-area`, {\r\n      message,\r\n      filter,\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  public async getChatMessages(\r\n    chatId: string,\r\n    query: { limit?: number; page?: number; search?: string } & Record<string, any> = {\r\n      limit: 20,\r\n      page: 1,\r\n      search: '',\r\n    },\r\n  ): Promise<MyApiResponse<IMessage>> {\r\n    const { data } = await this.#axiosInstance.get<MyApiResponse<IMessage>>(\r\n      `/v1/chats/${chatId}/messages?${queryStringify(query)}`,\r\n    );\r\n\r\n    return data;\r\n  }\r\n\r\n  public async getChatInfo(chatId: string): Promise<unknown> {\r\n    const { data } = await this.#axiosInstance.get(`/v1/chats/${chatId}`);\r\n\r\n    return data;\r\n  }\r\n\r\n  public async getChatMedia(\r\n    chatId: string,\r\n    { limit = 20, page = 1 }: { limit?: number; page?: number } = { limit: 20, page: 1 },\r\n  ): Promise<unknown[]> {\r\n    return [];\r\n  }\r\n\r\n  public async getChatFiles(\r\n    chatId: string,\r\n    { limit = 20, page = 1 }: { limit?: number; page?: number } = { limit: 20, page: 1 },\r\n  ): Promise<unknown[]> {\r\n    return [];\r\n  }\r\n\r\n  public async getChatAudios(\r\n    chatId: string,\r\n    { limit = 20, page = 1 }: { limit?: number; page?: number } = { limit: 20, page: 1 },\r\n  ): Promise<unknown[]> {\r\n    return [];\r\n  }\r\n\r\n  public async getUpdates({\r\n    limit = this.#polling.limit,\r\n    allowedUpdates = [],\r\n  }: {\r\n    limit?: number;\r\n    page?: number;\r\n    allowedUpdates?: MessageType[];\r\n  } = {}): Promise<{\r\n    updates: {\r\n      updates: IOnUpdate[];\r\n      users: {\r\n        _id: string;\r\n        isOnline: boolean;\r\n      }[];\r\n      messages: {\r\n        _id: string;\r\n        readAt: string;\r\n      }[];\r\n    };\r\n    meta: any;\r\n  }> {\r\n    const { data } = await this.#axiosInstance\r\n      .get(`/v1/users/updates?limit=${limit}&hash=${this.#updatesHash}`)\r\n      .catch(() => ({\r\n        data: {\r\n          data: [],\r\n          meta: {\r\n            hash: null,\r\n            currentPage: 1,\r\n            limit: 100,\r\n            totalCount: 0,\r\n            totalPages: 0,\r\n          },\r\n        },\r\n      }));\r\n\r\n    this.#updatesHash = data.meta.hash ? data.meta.hash : '';\r\n\r\n    return { updates: data.data, meta: data.meta };\r\n  }\r\n\r\n  public async readMessage(chatId: string, message: { messageId: string; messageReadAt: string }) {\r\n    const { data } = await this.#axiosInstance.patch(`/v1/chats/${chatId}/messages`, message);\r\n    return data;\r\n  }\r\n\r\n  public async getChats(\r\n    query: {\r\n      limit?: number;\r\n      page?: number;\r\n      search?: string;\r\n      type?: ChatType;\r\n    } & Record<string, any> = { limit: 20, page: 1, type: null },\r\n  ): Promise<MyApiResponse<IChat>> {\r\n    const { data } = await this.#axiosInstance.get(`/v1/chats?${queryStringify(query)}`);\r\n\r\n    return data;\r\n  }\r\n\r\n  public ping() {\r\n    if (this.socket) {\r\n      this.socket.emit('ping', new Date().toISOString());\r\n    } else {\r\n      this.#axiosInstance.get('/check-health').catch();\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nlet messenger: Messenger;\r\n\r\nexport function getMessenger(\r\n  customOptions: CustomOptions,\r\n  options: Partial<ManagerOptions & SocketOptions> = {},\r\n) {\r\n  if (messenger) {\r\n    return messenger;\r\n  }\r\n\r\n  messenger = new Messenger(customOptions, options);\r\n  return messenger;\r\n}\r\n"]}